Перем
	ИмяФайлаДБФ,	// Файл для хранения соответсвий
	ИмяИндексаДБФ,	// Индекс базы соответствий
	ВходящийФайл,	// Message_ЭД_ЦБ.xml
	ИсходящийФайл,	// Message_ЦБ_ЭД.xml
	ПрефиксУзлаEDI;	// Код переферийной базы для обмена

//*****************************************************************************
Процедура ИзменитьКодовуюСтраницуФайла(имяФайла, исходнКодировка, нужнаяКодировка)
    Если ФС.СуществуетФайл(имяФайла) = 0 Тогда
        Сообщить("Файл " + имяФайла + " - не найден! Изменение кодировки отменено.", "!");
        Возврат;
    КонецЕсли;
    ScrptCtrl = СоздатьОбъект("MSScriptControl.ScriptControl");
    ScrptCtrl.Language = "VBScript";
    ScrptCtrl.AddCode("
        |Function StrConv(Text,SourceCharset,DestCharset)
        |    Set Stream=CreateObject(""ADODB.Stream"")
        |    Stream.Type=2
        |    Stream.Mode=3
        |    Stream.Open
        |    Stream.Charset=DestCharset
        |    Stream.WriteText Text
        |    Stream.Position=0
        |    Stream.Charset=SourceCharset
        |    StrConv=Stream.ReadText
        |End Function
        |
        |sub ConvertCodepage( fileName, SourceCharset, DestCharset )
        |    set fs = CreateObject(""Scripting.FilesystemObject"")
        |    originalText = fs.openTextFile(fileName,1).readAll()
        |    convertedText = strConv(originalText, SourceCharset, DestCharset )
        |    fs.openTextFile(fileName,2,true).write(convertedText)
        |end sub
        |
        |");
    Module        = ScrptCtrl.Modules("Global");
    CodeObject    = Module.CodeObject;
    CodeObject.ConvertCodepage(имяФайла, исходнКодировка, нужнаяКодировка);
    //ВОЗМОЖНЫЕ ВАРИАНТЫ КОДИРОВОК
    //"UTF-8"
    //"KOI8-R"
    //"Windows-1251"
    //"ISO-8859-5"
КонецПроцедуры	

//*****************************************************************************
Функция ПолучитьТекстХМЛИзФайлаУТФ8(пИмяФайла)
	// Функция создана исключительно для обхода проблем парсинга через msxml4.dll
	
	лВременныйФайл = пИмяФайла + "_";
	ФС.КопироватьФайл(пИмяФайла,лВременныйФайл,0);                       
	ИзменитьКодовуюСтраницуФайла(лВременныйФайл,"UTF-8","Windows-1251");
	
	лТекст = СоздатьОбъект("Текст");
	лТекст.Открыть(лВременныйФайл);
	лКоличествоСтрок = лТекст.КоличествоСтрок();
	Для Сч = 1 по лКоличествоСтрок Цикл
		лСтрокаХМЛ = лСтрокаХМЛ + лТекст.ПолучитьСтроку(Сч);
	КонецЦикла;
	
	ФС.УдалитьФайл(лВременныйФайл);
	                                                
	лСтрокаХмл = СтрЗаменить(лСтрокаХмл,"msg:",""); 
	лСтрокаХмл = СтрЗаменить(лСтрокаХмл," xmlns=""http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2""","");
	
	Возврат лСтрокаХМЛ;
КонецФункции	// ПолучитьТекстИзФайла

//*****************************************************************************
Функция ДатуВХмл(пДата,пВремя = "00:00:00") // на выходе - "2016-12-15T00:00:00"
	
	лДатаДень = Прав("0" + ДатаЧисло(пДата),2);
	лДатаМесяц = Прав("0" + ДатаМесяц(пДата),2);
	лРезультат = "" + ДатаГод(пДата) + "-" + 
		лДатаМесяц + "-" + 
		лДатаДень + 
		?(пВремя <> "","T" + пВремя,"");
	
	Возврат лРезультат;
КонецФункции	// ДатуВХмл

//*****************************************************************************
Функция ЧислоВХекс(пЧисло)
	
	лМладшиеБиты = пЧисло % 16;
    лСтаршиеБиты = Цел(пЧисло/16);
    
    Если лСтаршиеБиты > 0 Тогда
        лРезультат = ЧислоВХекс(лСтаршиеБиты);
    Иначе
        лРезультат = "";
    КонецЕсли;
    
    ХексСимволы = "0123456789abcdef";
                   
	Возврат лРезультат + Сред(ХексСимволы, лМладшиеБиты + 1, 1);	
    
КонецФункции	// ЧислоВХекс

//*****************************************************************************
Функция ХексВЧисло(пХекс)
	
	лМладшиеБиты = Прав(пХекс, 1);
    лСтаршиеБиты = Лев(пХекс, СтрДлина(пХекс) - 1);
    
    ХексСимволы = "0123456789abcdef";
	
    лРезультат = Найти(ХексСимволы, лМладшиеБиты) - 1;
	
	Если лРезультат = -1 Тогда              
		ош = 1/0; // Ошибка! Параметр не является HEX-значением.
	КонецЕсли;
    
    Если лСтаршиеБиты = "" Тогда
        Возврат лРезультат;
    Иначе
        Возврат ХексВЧисло(лСтаршиеБиты) * 16 + лРезультат;
    КонецЕсли;	
	
КонецФункции	// ХексВЧисло

//*****************************************************************************
Функция СтрокуВХекс(пИсходнаяСтрока)
	
	лДлинаСтроки = СтрДлина(пИсходнаяСтрока);
	лРезультат = "";
	
	Для НомерПозиции = 1 По лДлинаСтроки Цикл
		лСимвол = Сред(пИсходнаяСтрока,НомерПозиции,1);
		лКодСимвола = КодСимв(лСимвол);
		
		лРезультат = лРезультат + ЧислоВХекс(лКодСимвола);
	КонецЦикла;
	
	Возврат лРезультат
	
КонецФункции	// СтрокуВХекс
                              
//*****************************************************************************
Функция ХексВСтроку(пХексСтрока)
	лКоличествоПар = СтрДлина(пХексСтрока) / 2;
	лРезультат = "";
	
	Для лНомерПары = 1 По лКоличествоПар Цикл       
		лНачалоПары = (лНомерПары - 1) * 2 + 1;
		лПараСимволов = Сред(пХексСтрока,лНачалоПары,2);
		
		лРезультат = лРезультат + Симв(ХексВЧисло(лПараСимволов));
	КонецЦикла;
	
	Возврат лРезультат
КонецФункции	// ХексВСтроку


//*****************************************************************************
Функция ПолучитьУникальныйИдентификатор(пСсылка)
	// На выходе должна получиться строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	// X - тип ссылка (справочник, документ). Символ в HEX
	// Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	// Z - ИД объекта. Строка в HEX

	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = ЗначениеВСтрокуВнутр(пСсылка);
	
	// "B","0","0","84","0","0","         1   "
	лСтрокаСРазделителями = Сред(лВнутрСтрока,2,СтрДлина(лВнутрСтрока)-2);
	
	лСписок = СоздатьОбъект("СписокЗначений");
	лСписок.ИзСтрокиСРазделителями(лСтрокаСРазделителями);
	
	НеВажно = "";
	лТип = лСписок.ПолучитьЗначение(1,НеВажно); // "B"
	лВид = лСписок.ПолучитьЗначение(4,НеВажно); // "84" - предполагается, что это всегда число, 4-ре цифры.
	лИДОбъекта = лСписок.ПолучитьЗначение(7,НеВажно); // "         1   "
	
	// Преобразование только типизированных значений. 
	// Длина идентификатора должна быть равной 13 символов.
	Если СтрДлина(лИДОбъекта) <> 13 Тогда
		Если СтрДлина(лИДОбъекта) = 23 Тогда // "{"O","0","0","0","0","0","      2457   2231945ЦБ "}"
			лВид = СокрЛП(Лев(лИдОбъекта,10));
			лИДОбъекта = Прав(лИДОбъекта,13);
		Иначе	
			ош = 1/0; // Ошибка! Длина идентификатора ожидается 13 символов.
		КонецЕсли;
	КонецЕсли;
	
	// "42008420202020202020202031202020"
	лРезультат = СтрокуВХекс(лТип) + Формат(лВид,"Ч(0)4") + СтрокуВХекс(лИДОбъекта);
                          
	// "42008420-2020-2020-2020-202031202020"
	лРезультат = Лев(лРезультат,8) + "-" + 
		Сред(лРезультат,9,4) + "-" + 
		Сред(лРезультат,13,4) + "-" + 
		Сред(лРезультат,17,4) + "-" + 
		Прав(лРезультат,12);
	          
	Возврат лРезультат;
КонецФункции	// ПолучитьУникальныйИдентификатор

//*****************************************************************************
Функция ПолучитьСсылкуПоИдентификатору(пИдентификатор)
	// На входе строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	//   X - тип ссылка (справочник, документ). Символ в HEX
	//   Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	//   Z - ИД объекта. Строка в HEX
	// На выходе ссылка на документ/справочник
	
	Если СтрДлина(пИдентификатор) <> 36 Тогда
		ош = 1/0; // Ошибка! Длина идентификатора ожидается 36 символов.
	КонецЕсли;
	
	// "42008420-2020-2020-2020-202031202020"
	// "42008420202020202020202031202020"
	лСтрока = СтрЗаменить(пИдентификатор,"-","");
	 
	НеВажно = "";
	лТип = Лев(лСтрока,2); // "42"
	лВид = Строка(Число(Сред(лСтрока,3,4))); // "84"
	лИДОбъекта = Прав(лСтрока,26); // "20202020202020202031202020"
	  
	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = "{"""+ХексВСтроку(лТип)+""",""0"",""0"","""+лВид+""",""0"",""0"","""+ХексВСтроку(лИДОбъекта)+"""}";
	
	лРезультат = ЗначениеИзСтрокиВнутр(лВнутрСтрока);
	
	Возврат лРезультат;
КонецФункции
              
//*****************************************************************************
Процедура ЗаписатьСоответствие(пСсылка,пИдентификатор8)

	ФайлДбф = создатьОбъект("XBASE");

	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 0 Тогда
		ФайлДбф.ДобавитьПоле("ref77","S",36,0);
		ФайлДбф.ДобавитьПоле("ref8","S",36,0);
		ФайлДбф.ДобавитьИндекс("idxref77","ref77",1,0,"");
		ФайлДбф.ДобавитьИндекс("idxref8","ref8",1,0,"");
		
		ФайлДбф.СоздатьФайл(ИмяФайлаДБФ,ИмяИндексаДБФ);
	Иначе
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяИндексаДБФ,0);
	КонецЕсли;
	
	ФайлДбф.Добавить();
	ФайлДбф.ref77 = ПолучитьУникальныйИдентификатор(пСсылка);
	ФайлДбф.ref8 = пИдентификатор8;
	ФайлДбф.Записать(); 
	
	ФайлДбф.ЗакрытьФайл();
КонецПроцедуры                         

//*****************************************************************************
Функция ПолучитьСсылкуПоИдентификаторуАгрегатора(пИдентификатор8)
	
	лРезультат = "";
	
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 1 Тогда
		ФайлДбф = СоздатьОбъект("XBASE");
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяИндексаДБФ,0);
		
		ФайлДбф.ТекущийИндекс("idxref8");
		Если ФайлДбф.Найти(пИдентификатор8,0) = 1 Тогда
			лРезультат = ПолучитьСсылкуПоИдентификатору(ФайлДбф.ref77);
		КонецЕсли;
		
		ФайлДбф.ЗакрытьФайл();
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

//*****************************************************************************
Функция ПолучитьИдентификаторАгрегатораПоСсылке(пСсылка)
	                                                    
	лРезультат = "";
	
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 1 Тогда
		лИдентификатор77 = ПолучитьУникальныйИдентификатор(пСсылка);
		
		ФайлДбф = СоздатьОбъект("XBASE");
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяИндексаДБФ,0);
		
		ФайлДбф.ТекущийИндекс("idxref77");
		Если ФайлДбф.Найти(лИдентификатор77,0) = 1 Тогда
			лРезультат = ФайлДбф.ref8;
		КонецЕсли;
		
		ФайлДбф.ЗакрытьФайл();
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции   

//*****************************************************************************
Процедура УвеличитьMessageNo()
	// Увеличивается номер исходящего пакета для узла EDI
	// Для вновь изменных данных заполняется идентификатор отправленного пакета.
	
	лЗапрос = СоздатьОбъект("ODBCRecordset");	
	
	лТекстЗапроса = "SELECT max(DWNLDID) FROM _1SDWNLDS WHERE DIRECT = 'O'";
	лТЗ = лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса); // Здесь нужно установить блокировку таблицы до записи.
	
	Если лТЗ.КоличествоСтрок() = 1 Тогда
		НомерИсходящейКвитанции = лТЗ.ПолучитьЗначение(1,1);
		НомерИсходящейКвитанции = _StrToId(Лев(НомерИсходящейКвитанции,6));
	Иначе
		// На случай если УРБД с нуля.
		НомерИсходящейКвитанции = 0;
	КонецЕсли;
	
	лMessageNo = НомерИсходящейКвитанции + 1;

	лИдентификаторПакета = _IdToStr(лMessageNo) + ЦентральнаяИБКод();
	
	лТекстЗапроса = "INSERT INTO _1SDWNLDS VALUES ('" + лИдентификаторПакета + "','" + ПрефиксУзлаEDI + "','O','')";
	
	Если лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса) = 1 Тогда
		
		// Заполняем идентификатор пакета для новых измененных данных.
		лТекстЗапроса = "UPDATE _1SUPDTS SET DWNLDID = '" + лИдентификаторПакета + "' WHERE DBSIGN = '" + ПрефиксУзлаEDI + "' AND DWNLDID = ''";
		
		лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса);
		
		MessageNo = лMessageNo;
	Иначе
		ош = 1/0; // Ошибка при увеличении MessageNo. 
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Процедура АктивироватьНовыйУзел()
	// Инициализация новой переферийной базы без первой выгрузки данных.
	// Перед активацией необходимо создать переферийную базу через конфигуратор.
	// После активации необходимо выгнать всех из базы.
	
	лЗапрос = СоздатьОбъект("ODBCRecordset");	
	
	лТекстЗапроса = "UPDATE _1SDBSET SET DBSTATUS = 'C' WHERE DBSIGN = '" + ПрефиксУзлаEDI + "' AND DBSTATUS = 'N'";
	Если лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса) = 1 Тогда
		Сообщить("Инициализация узла с кодом """ + ПрефиксУзлаEDI + """ успешна завершена.");
		Предупреждение("Необходимо перезапустить ИБ!");
	Иначе
		Сообщить("Новый узел с кодом """ + ПрефиксУзлаEDI + """ не обнаружен.");
	КонецЕсли;
	
КонецПроцедуры
    
//*****************************************************************************
Функция ПолучитьИзмененныеДокументы(ЭтоВыгрузка = 0)
	
	лРезультат = СоздатьОбъект("ТаблицаЗначений");
	лРезультат.НоваяКолонка("Документ");
	лРезультат.НоваяКолонка("ИДПакета");
	
	Попытка 
		лЗапрос = СоздатьОбъект("ODBCRecordset");
	Исключение  
		Сообщить("Не удалось создать объект ""ODBCRecordset""");
		
		Возврат лРезультат;
	КонецПопытки;
	
	лТекстЗапроса ="
					|SELECT
					|	TYPEID as Вид,
					|	OBJID as ИДОбъекта,
					|	DELETED as ПризнакУдаления,
					|	DWNLDID as ИДПакета
					|FROM
					|	_1SUPDTS
					|WHERE
					|	DBSIGN = '" + ПрефиксУзлаEDI + "'";
					
	лТЗ = лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса);
	
	Если ЭтоВыгрузка = 1 Тогда
		УвеличитьMessageNo();
	КонецЕсли;
	
	лТЗ.ВыбратьСтроки();
	Пока лТЗ.ПолучитьСтроку() = 1 Цикл    
		Если СтрДлина(лТЗ.ИДОбъекта) <> 9  Тогда                   
			// Предполагается, что длина ИД равна 9 символов.
			ош = 1/0; // Ошибка! Сбой в получения измененных данных.
		КонецЕсли;
		
		лИДБазы = Прав(лТЗ.ИДОбъекта,3);
		лИДОбъекта = _StrToID(Лев(лТЗ.ИДОбъекта,6));
		лПолныйИД = Прав("      " + лИДОбъекта + лИДБазы,13);
		
		// Документ
		лВнутрСтрока = "{""O"",""0"",""0"",""" + лТЗ.Вид + """,""0"",""0"",""" + лПолныйИД + """}";
		лОбъект = ЗначениеИзСтрокиВнутр(лВнутрСтрока);
		
		Если ПустоеЗначение(лОбъект) = 1 Тогда
			// Остальные объекты не интересуют.
			Продолжить;
		КонецЕсли;
		
		лРезультат.НоваяСтрока();
		лРезультат.Документ = лОбъект;
		лРезультат.ИДПакета = лТЗ.ИДПакета;
	КонецЦикла;
	
	Возврат лРезультат;
КонецФункции

//*****************************************************************************
Процедура ПоказатьИзмененныеОбъекты()
	лТЗ = ПолучитьИзмененныеДокументы();
	лТЗ.ВыбратьСтроку("Зарегистрированные измененния документов");
КонецПроцедуры	// ПолучитьИзмененныеОбъекты

//*****************************************************************************
Процедура ОчиститьИзмененныеОбъекты(пНомерКвитанции = 0)
	лЗапрос = СоздатьОбъект("ODBCRecordset");          
	
	Если пНомерКвитанции <> 0 Тогда
		лИдентификаторПакета = _IdToStr(пНомерКвитанции) + ТекущаяИБКод();
		лТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ПрефиксУзлаEDI + "' AND DWNLDID <= '" + лИдентификаторПакета + "'";
	Иначе
		лТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ПрефиксУзлаEDI + "'";
	КонецЕсли;
	
	лЗапрос.ВыполнитьИнструкцию(лТекстЗапроса);
КонецПроцедуры	// ОчиститьИзмененныеОбъекты()

//*****************************************************************************
Процедура ВложитьСтруктуруВУзелХМЛ(пУзел,пСтруктура)
	
	Для Номер = 1 По пСтруктура.РазмерСписка() Цикл
		лИмяЭлемента = "";
		лЭлементСписка = пСтруктура.ПолучитьЗначение(Номер,лИмяЭлемента);
		
		Если ТипЗначенияСтр(лЭлементСписка) = "СписокЗначений" Тогда
			лУзел = пУзел.СоздатьПодчиненныйЭлемент(лИмяЭлемента);
			ВложитьСтруктуруВУзелХМЛ(лУзел,лЭлементСписка);
		ИначеЕсли ПустоеЗначение(лЭлементСписка) = 0 Тогда			
			лУзел = пУзел.СоздатьПодчиненныйЭлемент(лИмяЭлемента);
			лУзел.Значение = лЭлементСписка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
    
//*****************************************************************************
Функция ПолучитьХМЛНоменклатура(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	//Тест+
	Если пЭл <> ПолучитьСсылкуПоИдентификатору(лСсылка) Тогда         
		Сообщить(лСсылка + ": " + пЭл);
		ош = 1/0; // Ошибка! Сбой в процедурах конвертирования ссылок.
	КонецЕсли;
	//Тест-
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ПолнНаименование);
	лКодВПрограмме = СокрЛП(пЭл.Код);
	лСтавкаНДС = пЭл.СтавкаНДС.Идентификатор();	//БезНДС, НДС18, НДС10
	лКодЕдиницыИзмерения = пЭл.БазоваяЕдиница.ОКЕИ.Код;
	лШтрихКод = пЭл.БазоваяЕдиница.ШтрихКод;
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Номенклатура","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКодВПрограмме,"КодВПрограмме");
	
	лСтруктураЕдиницаИзмерения = СоздатьОбъект("СписокЗначений");
	лСтруктураЕдиницаИзмерения.ДобавитьЗначение(лКодЕдиницыИзмерения,"Код");

	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение("Товар","ТипНоменклатуры");
	лСтруктура.ДобавитьЗначение(лСтруктураЕдиницаИзмерения,"ЕдиницаИзмерения");
	лСтруктура.ДобавитьЗначение(лСтавкаНДС,"СтавкаНДС");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Если ПустоеЗначение(лШтрихКод) = 0 Тогда
		ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
			ХмлСтрокаДопРеквизита = ХмлДопРеквизиты.СоздатьПодчиненныйЭлемент("Строка");
				ХмлЗначениеСвойства = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("ЗначениеСвойства");
					ХмлСтрока = ХмлЗначениеСвойства.СоздатьПодчиненныйЭлемент("Строка");
					ХмлСтрока.Значение = лШтрихКод;
				ХмлСвойство = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("Свойство");
					ХмлНаименование = ХмлСвойство.СоздатьПодчиненныйЭлемент("Наименование");
					ХмлНаименование.Значение = "ШтрихКод";
	КонецЕсли;
	
	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛКонтрагента(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	//Тест+
	Если пЭл <> ПолучитьСсылкуПоИдентификатору(лСсылка) Тогда         
		Сообщить(лСсылка + ": " + пЭл);
		ош = 1/0; // Ошибка! Сбой в процедурах конвертирования ссылок.
	КонецЕсли;
	//Тест-
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ЮрФизЛицо.ПолнНаименование);
	лИннКпп = пЭл.ЮрФизЛицо.ИНН;
	лИНН = Лев(лИннКпп,10);
	лКПП = Сред(лИннКпп,12);
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Контрагенты","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лИНН,"ИНН");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКПП,"КПП");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛОрганизации(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	//Тест+
	Если пЭл <> ПолучитьСсылкуПоИдентификатору(лСсылка) Тогда         
		Сообщить(лСсылка + ": " + пЭл);
		ош = 1/0; // Ошибка! Сбой в процедурах конвертирования ссылок.
	КонецЕсли;
	//Тест-
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ЮрЛицо.ПолнНаименование);
	лИннКпп = пЭл.ЮрЛицо.ИНН;
	лИНН = Лев(лИннКпп,10);
	лКПП = Сред(лИннКпп,12);
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Организации","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лИНН,"ИНН");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКПП,"КПП");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛЗаказа(пХмлДокумент,пЭл) 
	лСсылкаИзАгрегатора = ПолучитьИдентификаторАгрегатораПоСсылке(пЭл);
	
	Если ПустаяСтрока(лСсылкаИзАгрегатора) = 1 Тогда
		Сообщить("Заявка не выгружена (не была ранее получена из Агрегатора): " + пЭл);
		Возврат ""; // Заказ создан не из агрегатора.
	КонецЕсли;
	
	лДатаЗаказа = ДатуВХмл(пЭл.ДатаДок);
	лНомерЗаказа = пЭл.НомерДок;
	лДатаОтгрузки = ДатуВХмл(пЭл.ДатаОтгрузки,"");
	лНаименованиеОрганизации = Строка(пЭл.Фирма);
	лСсылкаОрганизации = ПолучитьУникальныйИдентификатор(пЭл.Фирма);
	лНаименованиеКонтрагента = Строка(пЭл.Контрагент);
	лСсылкаКонтрагент = ПолучитьУникальныйИдентификатор(пЭл.Контрагент);
	
	лСуммаВключаетНДС = ?(пЭл.СуммаВклНДС = 1, "true", "false");
	лСуммаДокумента = пЭл.Итог("Сумма")	+ ?(пЭл.СуммаВклНДС = 1,0,пЭл.Итог("СуммаНДС"));
	
	// -------------------
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Документ.ЗаказКлиента","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лОрганизация = СоздатьОбъект("СписокЗначений");
	лОрганизация.ДобавитьЗначение(лСсылкаОрганизации,"Ссылка");
	лОрганизация.ДобавитьЗначение(лНаименованиеОрганизации,"Наименование");
	лОрганизация.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лКонтрагент = СоздатьОбъект("СписокЗначений");
	лКонтрагент.ДобавитьЗначение(лСсылкаКонтрагент,"Ссылка");
	лКонтрагент.ДобавитьЗначение(лНаименованиеОрганизации,"Наименование");
	лКонтрагент.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лВалюта = СоздатьОбъект("СписокЗначений");
	лВалюта.ДобавитьЗначение("643","Код");
	лВалюта.ДобавитьЗначение("RUB","Наименование");
	
	лДанныеВзаиморасчетов = СоздатьОбъект("СписокЗначений");
	лДанныеВзаиморасчетов.ДобавитьЗначение(1,"КурсВзаиморасчетов");
	
	лТовары = СоздатьОбъект("СписокЗначений");
	пЭл.ВыбратьСтроки();
	Пока пЭл.ПолучитьСтроку() = 1 Цикл                
		лКодЕдИзмерения = пЭл.Номенклатура.БазоваяЕдиница.ОКЕИ.Код;
		лСсылкаНоменклатура = ПолучитьУникальныйИдентификатор(пЭл.Номенклатура);
		лНаименованиеНоменклатуры = Строка(пЭл.Номенклатура);
                                                          
		лНоменклатура = СоздатьОбъект("СписокЗначений");
		лНоменклатура.ДобавитьЗначение(лСсылкаНоменклатура,"Ссылка");
		лНоменклатура.ДобавитьЗначение(лНаименованиеНоменклатуры,"Наименование");
		
		лДанныеНоменклатуры = СоздатьОбъект("СписокЗначений");
		лДанныеНоменклатуры.ДобавитьЗначение(лНоменклатура,"Номенклатура");
		
		лДанныеСтроки = СоздатьОбъект("СписокЗначений");
		лДанныеСтроки.ДобавитьЗначение(лДанныеНоменклатуры,"ДанныеНоменклатуры");

		лЕдИзмерения = СоздатьОбъект("СписокЗначений");
		лЕдИзмерения.ДобавитьЗначение(лКодЕдИзмерения,"Код");
		лДанныеСтроки.ДобавитьЗначение(лЕдИзмерения,"ЕдиницаИзмерения");
		
		лДанныеСтроки.ДобавитьЗначение(пЭл.Количество,"Количество");
		лДанныеСтроки.ДобавитьЗначение(пЭл.Сумма,"Сумма");
		лДанныеСтроки.ДобавитьЗначение(пЭл.Цена,"Цена");
		лДанныеСтроки.ДобавитьЗначение(пЭл.СтавкаНДС.Идентификатор(),"СтавкаНДС");
		лДанныеСтроки.ДобавитьЗначение(пЭл.СуммаНДС,"СуммаНДС");
		
		лТовары.ДобавитьЗначение(лДанныеСтроки,"Строка");
	КонецЦикла;
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылкаИзАгрегатора,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лДатаЗаказа,"Дата");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНомерЗаказа,"Номер");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лОрганизация,"Организация");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение(лВалюта,"Валюта");
	лСтруктура.ДобавитьЗначение(лСуммаДокумента,"Сумма");
	лСтруктура.ДобавитьЗначение(лКонтрагент,"Контрагент");
	лСтруктура.ДобавитьЗначение(лДанныеВзаиморасчетов,"ДанныеВзаиморасчетов");
	лСтруктура.ДобавитьЗначение(лСуммаВключаетНДС,"СуммаВключаетНДС");
	лСтруктура.ДобавитьЗначение(лТовары,"Товары");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
		ХмлСтрокаДопРеквизита = ХмлДопРеквизиты.СоздатьПодчиненныйЭлемент("Строка");
			ХмлЗначениеСвойства = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("ЗначениеСвойства");
				ХмлСтрока = ХмлЗначениеСвойства.СоздатьПодчиненныйЭлемент("Дата");
				ХмлСтрока.Значение = лДатаОтгрузки;
			ХмлСвойство = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("Свойство");
				ХмлНаименование = ХмлСвойство.СоздатьПодчиненныйЭлемент("Наименование");
				ХмлНаименование.Значение = "ДатаОтгрузки";
	
	Сообщить("Выгружено: " + пЭл);
				
	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛРеализации(пХмлДокумент,пЭл) 
	лСсылка77 = ПолучитьУникальныйИдентификатор(пЭл);
	лСсылкаЗаказаИзАгрегатора = ПолучитьИдентификаторАгрегатораПоСсылке(пЭл.ДокОснование);
	
	Если ПустаяСтрока(лСсылкаЗаказаИзАгрегатора) = 1 Тогда
		Сообщить("Реализация не выгружена (нет связи с заявкой из Агрегатора): " + пЭл);
		Возврат ""; // Накладные без заказов из агрегатора не выгружаются.
	КонецЕсли;
	  
	лНомерДок = пЭл.НомерДок;
	лДатаДок = ДатуВХмл(пЭл.ДатаДок);
	лДатаЗаказа = ДатуВХмл(пЭл.ДокОснование.ДатаДок);
	лНомерЗаказа = пЭл.ДокОснование.НомерДок;

	лНаименованиеОрганизации = Строка(пЭл.Фирма);
	лСсылкаОрганизации = ПолучитьУникальныйИдентификатор(пЭл.Фирма);
	
	лНаименованиеКонтрагента = Строка(пЭл.Контрагент);
	лСсылкаКонтрагент = ПолучитьУникальныйИдентификатор(пЭл.Контрагент);
	
	лНаименованиеГрузополучателя = Строка(пЭл._Грузополучатель);
	лСсылкаГрузополучатель = ПолучитьУникальныйИдентификатор(пЭл._Грузополучатель);
	
	лАдресДоставки = Строка(пЭл._МаршрутныйАдрес);
	
	лСуммаВключаетНДС = ?(пЭл.СуммаВклНДС = 1, "true", "false");
	лСуммаДокумента = пЭл.Итог("Сумма")	+ ?(пЭл.СуммаВклНДС = 1,0,пЭл.Итог("СуммаНДС"));
	
	лВидОперации = "РеализацияКлиенту";
	лНалогообложение = "ПродажаОблагаетсяНДС";
	
	лДокПроведен = ?(пЭл.Проведен() = 1, "true", "false");

	// -------------------
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Документ.РеализацияТоваровУслуг","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лОрганизация = СоздатьОбъект("СписокЗначений");
	лОрганизация.ДобавитьЗначение(лСсылкаОрганизации,"Ссылка");
	лОрганизация.ДобавитьЗначение(лНаименованиеОрганизации,"Наименование");
	лОрганизация.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лКонтрагент = СоздатьОбъект("СписокЗначений");
	лКонтрагент.ДобавитьЗначение(лСсылкаКонтрагент,"Ссылка");
	лКонтрагент.ДобавитьЗначение(лНаименованиеОрганизации,"Наименование");
	лКонтрагент.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");

	лГрузополучатель = СоздатьОбъект("СписокЗначений");
	лГрузополучатель.ДобавитьЗначение(лСсылкаГрузополучатель,"Ссылка");
	лГрузополучатель.ДобавитьЗначение(лНаименованиеГрузополучателя,"Наименование");
	лГрузополучатель.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лВалюта = СоздатьОбъект("СписокЗначений");
	лВалюта.ДобавитьЗначение("643","Код");
	лВалюта.ДобавитьЗначение("RUB","Наименование");
	
	лДанныеВзаиморасчетов = СоздатьОбъект("СписокЗначений");
	лДанныеВзаиморасчетов.ДобавитьЗначение(1,"КурсВзаиморасчетов");
	
	лТовары = СоздатьОбъект("СписокЗначений");
	пЭл.ВыбратьСтроки();
	Пока пЭл.ПолучитьСтроку() = 1 Цикл                
		лКодЕдИзмерения = пЭл.Номенклатура.БазоваяЕдиница.ОКЕИ.Код;
		лСсылкаНоменклатура = ПолучитьУникальныйИдентификатор(пЭл.Номенклатура);
		лНаименованиеНоменклатуры = Строка(пЭл.Номенклатура);
                                                          
		лНоменклатура = СоздатьОбъект("СписокЗначений");
		лНоменклатура.ДобавитьЗначение(лСсылкаНоменклатура,"Ссылка");
		лНоменклатура.ДобавитьЗначение(лНаименованиеНоменклатуры,"Наименование");
		
		лДанныеНоменклатуры = СоздатьОбъект("СписокЗначений");
		лДанныеНоменклатуры.ДобавитьЗначение(лНоменклатура,"Номенклатура");
		
		лДанныеСтроки = СоздатьОбъект("СписокЗначений");
		лДанныеСтроки.ДобавитьЗначение(лДанныеНоменклатуры,"ДанныеНоменклатуры");

		лЕдИзмерения = СоздатьОбъект("СписокЗначений");
		лЕдИзмерения.ДобавитьЗначение(лКодЕдИзмерения,"Код");
		лДанныеСтроки.ДобавитьЗначение(лЕдИзмерения,"ЕдиницаИзмерения");
		
		лДанныеСтроки.ДобавитьЗначение(пЭл.Количество,"Количество");
		лДанныеСтроки.ДобавитьЗначение(пЭл.Сумма,"Сумма");
		лДанныеСтроки.ДобавитьЗначение(пЭл.Цена,"Цена");
		
		Если лНалогообложение = "ПродажаОблагаетсяНДС" Тогда
			лДанныеСтроки.ДобавитьЗначение(пЭл.СтавкаНДС.Идентификатор(),"СтавкаНДС");
			лДанныеСтроки.ДобавитьЗначение(пЭл.СуммаНДС,"СуммаНДС");
		КонецЕсли;
		
		лТовары.ДобавитьЗначение(лДанныеСтроки,"Строка");
	КонецЦикла;
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка77,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лДатаДок,"Дата");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНомерДок,"Номер");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лОрганизация,"Организация");
	
	лЗаказ = СоздатьОбъект("СписокЗначений");
	лЗаказ.ДобавитьЗначение(лСсылкаЗаказаИзАгрегатора,"Ссылка");
	лЗаказ.ДобавитьЗначение(лДатаЗаказа,"Дата");
	лЗаказ.ДобавитьЗначение(лНомерЗаказа,"Номер");
	лЗаказ.ДобавитьЗначение(лОрганизация,"Организация");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение(лВидОперации,"ВидОперации");
	лСтруктура.ДобавитьЗначение(лВалюта,"Валюта");
	лСтруктура.ДобавитьЗначение(лСуммаДокумента,"Сумма");
	
	Если лНалогообложение = "ПродажаОблагаетсяНДС" Тогда
    	лСтруктура.ДобавитьЗначение(лСуммаВключаетНДС,"СуммаВключаетНДС");
	КонецЕсли;
	
	лСтруктура.ДобавитьЗначение(лКонтрагент,"Контрагент");
	лСтруктура.ДобавитьЗначение(лДанныеВзаиморасчетов,"ДанныеВзаиморасчетов");
	лСтруктура.ДобавитьЗначение(лЗаказ,"Заказ");
	лСтруктура.ДобавитьЗначение(лГрузополучатель,"Грузополучатель");
	лСтруктура.ДобавитьЗначение(лАдресДоставки,"АдресДоставки");
	лСтруктура.ДобавитьЗначение(лНалогообложение,"Налогообложение");
	лСтруктура.ДобавитьЗначение(лТовары,"Товары");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
		ХмлСтрокаДопРеквизита = ХмлДопРеквизиты.СоздатьПодчиненныйЭлемент("Строка");
			ХмлЗначениеСвойства = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("ЗначениеСвойства");
				ХмлСтрока = ХмлЗначениеСвойства.СоздатьПодчиненныйЭлемент("Булево");
				ХмлСтрока.Значение = лДокПроведен;
			ХмлСвойство = ХмлСтрокаДопРеквизита.СоздатьПодчиненныйЭлемент("Свойство");
				ХмлНаименование = ХмлСвойство.СоздатьПодчиненныйЭлемент("Наименование");
				ХмлНаименование.Значение = "Проведен";
	
	Сообщить("Выгружено: " + пЭл);
				
	Возврат ХмлНовыйУзел;
	
КонецФункции


//*****************************************************************************
Процедура УпаковатьВКонтейнер(пХмлДокумент,пСписокУзлов)
	
	лКодЭтогоУзла = "ЦБ"; // Идентификатор этой базы в узле корреспондента.
	лКодУзлаКорреспондента = "ЭД"; // Идентификатор базы корреспондента.
	лИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	
	
	Ур1 = пХмлДокумент.СоздатьПодчиненныйЭлемент("Message");
	Ур1.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema-instance","xsi");
	Ур1.УстановитьПространствоИмен("http://www.1c.ru/SSL/Exchange/Message","msg");
	Ур1.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema","xs");
	
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("msg:Header");	
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:Format");	
		Ур3.Значение = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2";
		
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:CreationDate");	
		Ур3.Значение = ДатуВХмл(ТекущаяДата(),ТекущееВремя());
			
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:Confirmation");
			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:ExchangePlan");
			Ур4.Значение = лИмяПланаОбмена;
	
			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:To");
			Ур4.Значение = лКодУзлаКорреспондента;

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:From");
			Ур4.Значение = лКодЭтогоУзла;

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:MessageNo");
			Ур4.Значение = Строка(MessageNo);

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:ReceivedNo");
			Ур4.Значение = Строка(ReceivedNo);
			
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:AvailableVersion");
		Ур3.Значение = "1.2";
			
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("Body",,"http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	Для Номер = 1 По пСписокУзлов.РазмерСписка() Цикл
		НеВажно = "";
		лУзел = пСписокУзлов.ПолучитьЗначение(Номер,НеВажно);
		Ур2.ДобавитьПодчиненный(лУзел);
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************
Функция ДатаИзСтроки(пДата) // "2014-05-25"
	лГод = Лев(пДата,4);
	лМесяц = Сред(пДата,6,2);
	лДень = Сред(пДата,9,2);
	
	лЗначение = Дата(лГод,лМесяц,лДень);
	Возврат  лЗначение;	
КонецФункции	// ДатаИзЕДИФормата(пДата)    
 
//*****************************************************************************
Процедура ПриОткрытии()

	Если ТекущаяИБЦентральная() = 0 Тогда
		Сообщить("Обработка предназначена для работы только в ЦБ", "!!!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
			Предупреждение("Компонента v7plus.dll не найдена!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ФС.СуществуетФайл("e:\REPO") = 1 Тогда
		лПуть = "e:\REPO";
	Иначе
		лПуть = "c:\REPO";
	КонецЕсли;
	                              
	лПуть = лПуть + "\ExchangePlan77\examples\";
	
	ВходящийФайл = лПуть + "Message_ЭД_ЦБ.xml";
	ИсходящийФайл = лПуть + "Message_ЦБ_ЭД.xml";
КонецПроцедуры

//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
Процедура ВыборкаНужнойНоменклатуры(пХмлДокумент,пСписокУзлов)
    
	лСпрТовары = СоздатьОбъект("Справочник.Номенклатура");
	
	лСпрТовары.ВыбратьЭлементы();
	Пока лСпрТовары.ПолучитьЭлемент() = 1 Цикл
		Если (лСпрТовары.Родитель.Код <> "Е0000102")и
			 (лСпрТовары.Родитель.Код <> "Е0000326")и
			 (лСпрТовары.Родитель.Код <> "Е0000397")и
			 (лСпрТовары.Родитель.Код <> "Е0000222")Тогда
			Продолжить;			 
		КонецЕсли;

		ХмлНовыйУзел = ПолучитьХМЛНоменклатура(пХмлДокумент,лСпрТовары.ТекущийЭлемент());
		пСписокУзлов.ДобавитьЗначение(ХмлНовыйУзел);
	КонецЦикла;  
	
КонецПроцедуры

//*****************************************************************************
Процедура ВыборкаКонтрагентов(пХмлДокумент,пСписокУзлов)
	ХмлУзел = ПолучитьХМЛКонтрагента(пХмлДокумент,ВыбКонтрагент);
	пСписокУзлов.ДобавитьЗначение(ХмлУзел);
КонецПроцедуры

//*****************************************************************************
Процедура ВыборкаОрганизаций(пХмлДокумент,пСписокУзлов)
	ХмлУзел = ПолучитьХМЛОрганизации(пХмлДокумент,ВыбОрганизация);
	пСписокУзлов.ДобавитьЗначение(ХмлУзел);
КонецПроцедуры


//*****************************************************************************
Процедура ЗагрузитьЗаказКлиента(пУзелХмл)
	
	лИдентификаторЗаказа = "";
	лДатаДок = "";
	лОрганизация = "";
	лКонтрагент = "";
	лКомментарий = "";
	лСуммаВключаетНДС = "";
	лНомерЗаказаПоДаннымКлиента = "";
	лГЛНАдреса = "";
	лДатаОтгрузки = "";
	лГрузополучатель = "";
	
	лТЧ = СоздатьОбъект("ТаблицаЗначений");
	лТЧ.НоваяКолонка("Номенклатура");
	лТЧ.НоваяКолонка("Количество");
	лТЧ.НоваяКолонка("Цена");
	
	//-------------------------------------
	//******************************************
	//************ ПАРСИНГ XML *****************

	лКоличествоОбъектов = пУзелХмл.КоличествоПодчиненных();
	 	
	Для СчУр1 = 1 По лКоличествоОбъектов Цикл
		Ур1 = пУзелХмл.ПолучитьПодчиненныйПоНомеру(СчУр1);
		
		Если Ур1.Наименование = "AdditionalInfo" Тогда //Комментарий
			лКомментарий = Ур1.Значение;
		ИначеЕсли Ур1.Наименование = "КлючевыеСвойства" Тогда
			
			Ур2 = Ур1.ВыбратьУзел("Ссылка");
			лИдентификаторЗаказа = Ур2.Значение;
			
			Ур2 = Ур1.ВыбратьУзел("Дата");
			лДатаДок = ДатаИзСтроки(Ур2.Значение);
			
			Ур2 = Ур1.ВыбратьУзел("Организация");
			Ур3 = Ур2.ВыбратьУзел("Ссылка");
			лОрганизация = ПолучитьСсылкуПоИдентификатору(Ур3.Значение);
			
		ИначеЕсли Ур1.Наименование = "Валюта" Тогда
		ИначеЕсли Ур1.Наименование = "Сумма" Тогда
		ИначеЕсли Ур1.Наименование = "Контрагент" Тогда
			
			Ур2 = Ур1.ВыбратьУзел("Ссылка");
			лКонтрагент = ПолучитьСсылкуПоИдентификатору(Ур2.Значение);
			
		ИначеЕсли Ур1.Наименование = "ДанныеВзаиморасчетов" Тогда
		ИначеЕсли Ур1.Наименование = "СуммаВключаетНДС" Тогда
			лСуммаВключаетНДС = ?(Ур1.Значение = "true",1,0);
		ИначеЕсли Ур1.Наименование = "Товары" Тогда
			
			лКоличествоПозиций = Ур1.КоличествоПодчиненных();
			
			Для СчНомерПозиции = 1 По лКоличествоПозиций Цикл
				лТЧ.НоваяСтрока();
				
				Ур2 = Ур1.ПолучитьПодчиненныйПоНомеру(СчНомерПозиции);
					
				лКоличествоРеквизитовТЧ = Ур2.КоличествоПодчиненных();
				
				Для СчНомерРеквизитаТЧ = 1 По лКоличествоРеквизитовТЧ Цикл
					
					Ур3 = Ур2.ПолучитьПодчиненныйПоНомеру(СчНомерРеквизитаТЧ);
					
					Если Ур3.Наименование = "ДанныеНоменклатуры" Тогда
						Ур4 = Ур3.ВыбратьУзел("Номенклатура");
						Ур5 = Ур4.ВыбратьУзел("Ссылка");
						лТЧ.Номенклатура = ПолучитьСсылкуПоИдентификатору(Ур5.Значение);
					ИначеЕсли Ур3.Наименование = "Цена" Тогда
						лТЧ.Цена = Число(Ур3.Значение);
					ИначеЕсли Ур3.Наименование = "Количество" Тогда
						лТЧ.Количество = Число(Ур3.Значение);
					КонецЕсли;
					
				КонецЦикла
			КонецЦикла;
			
		ИначеЕсли Ур1.Наименование = "ДополнительныеРеквизиты" Тогда
			лКоличествоДопРеквизитов = Ур1.КоличествоПодчиненных();
			
			Для СчНомерДопРеквизита = 1 По лКоличествоДопРеквизитов Цикл
				Ур3 = Ур1.ПолучитьПодчиненныйПоНомеру(СчНомерДопРеквизита);
				
				УрЗначение = Ур3.ВыбратьУзел("ЗначениеСвойства");

				Ур4 = Ур3.ВыбратьУзел("Свойство");
				Ур5 = Ур4.ВыбратьУзел("Наименование");
				лНаименованиеСвойства = Ур5.Значение;
				
				Если лНаименованиеСвойства = "НомерПоДаннымКлиента" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лНомерЗаказаПоДаннымКлиента = лЗначениеСвойства;
				ИначеЕсли лНаименованиеСвойства = "ГЛНТочкиДоставки" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лГЛНАдреса = лЗначениеСвойства;
				ИначеЕсли лНаименованиеСвойства = "ЖелаемаяДатаОтгрузки" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Дата").Значение;
					лДатаОтгрузки = ДатаИзСтроки(лЗначениеСвойства);
				ИначеЕсли лНаименованиеСвойства = "Грузополучатель" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лГрузополучатель = ПолучитьСсылкуПоИдентификатору(лЗначениеСвойства);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;
	
	//******************************************
	//************ СОЗДАНИЕ ЗАКАЗА**************
	         
	//Если заказ есть, обновляем (если не проведен), иначе добавляем новый Документ.
	Заявка77 = СоздатьОбъект("Документ.ЗаявкаПокупателя");
	
	лСсылкаНаЗаявкуВБазе = ПолучитьСсылкуПоИдентификаторуАгрегатора(лИдентификаторЗаказа);
	
	Если ПустоеЗначение(лСсылкаНаЗаявкуВБазе) = 0 Тогда
		
		Если лСсылкаНаЗаявкуВБазе.Выбран() = 0 Тогда //Документ был удален из ЦБ
			Заявка77.Новый();
		ИначеЕсли лСсылкаНаЗаявкуВБазе.Проведен() = 1 Тогда 
			Сообщить("Заказ проведён (обновление отменено): " + лСсылкаНаЗаявкуВБазе);
			Возврат;
		Иначе
			Заявка77.НайтиДокумент(лСсылкаНаЗаявкуВБазе);
		КонецЕсли;
	Иначе
		//На случай:
		//Произошла исключительная ситуация (1С:Предприятие): SQL State: HYT00 Native: 0 Message: [Microsoft][ODBC SQL Server Driver]Время ожидания истекло 
		Попытка
			Заявка77.Новый();
		Исключение
			Сообщить("Неудачная попытка создания заявки!");
		    Возврат;
		КонецПопытки; 
	КонецЕсли;
	
	Заявка77.УдалитьСтроки();
	
	
	//*** Пользователь
	лПользователь = СоздатьОбъект("Справочник.Пользователи");
	Если лПользователь.НайтиПоКоду("EDILoader") = 1 Тогда
		лПользователь = лПользователь.ТекущийЭлемент();
	Иначе
		лПользователь = ПолучитьПустоеЗначение();
	КонецЕсли;
	
	//*** Адрес доставки
	СпрАдрес = СоздатьОбъект("Справочник.Адреса");
	СпрАдрес.ИспользоватьВладельца(лКонтрагент);
	
	Если СпрАдрес.НайтиПоРеквизиту("Поле1",лГЛНАдреса,0) = 1 Тогда
		АдресМагазина = СпрАдрес.ТекущийЭлемент();
		//Обновим название адреса, если оно не совпадает с текущим наименованием в 1С						
	Иначе
		АдресМагазина = "";
	КонецЕсли; 
	
	лВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку;	
	
	лДоговор = лКонтрагент.ОсновнойДоговор;
	лДатаОплаты = лДатаДок + лДоговор.ГлубинаКредита;
	лПроект = лКонтрагент._Проект;
	лФирма = лДоговор.ОснФирма;
	лВалюта = лДоговор.ВалютаВзаиморасчетов;
	
	Заявка77.ДатаДок = лДатаДок;
	Заявка77.ВидОперации = лВидОперации;
	Заявка77.Курс = 1;
	Заявка77.УчитыватьНДС = 1;
	Заявка77.ДатаОтгрузки = лДатаОтгрузки;
	Заявка77.Автор = лПользователь;           
	Заявка77._Адрес = АдресМагазина;
	Заявка77.Контрагент = лКонтрагент;  
	Заявка77.Проект = лПроект;
	Заявка77.Договор = лДоговор;
	Заявка77.Фирма = лФирма;
	Заявка77.ДатаОплаты = лДатаОплаты;
	Заявка77.Валюта = лВалюта;
	Заявка77.Комментарий = лКомментарий;
	Заявка77.НомерЕди = лНомерЗаказаПоДаннымКлиента;
	Заявка77.СпособВвода = Перечисление.СпособыВвода.Авто;
	Заявка77.ГЛНДоставки = лГЛНАдреса;
	Заявка77.Грузополучатель = лГрузополучатель;
	
	//Если в xml есть тег СуммаВключаетНДС то цены брать из заказа
	Если лСуммаВключаетНДС <> "" Тогда 
		Заявка77.СуммаВклНДС = лСуммаВключаетНДС;
	Иначе
		лТипЦен = лДоговор.ТипЦен;
		Заявка77.ТипЦен = лТипЦен;
		
		Если лКонтрагент.НДССверху = 1 Тогда
			Заявка77.СуммаВклНДС = 0;
		Иначе
			Заявка77.СуммаВклНДС = лТипЦен.ЦенаВклНДС;
		КонецЕсли;
	КонецЕсли; 
	
	лТЧ.ВыбратьСтроки();
	Пока лТЧ.ПолучитьСтроку() = 1 Цикл
		Заявка77.НоваяСтрока();
		Заявка77.Количество = лТЧ.Количество;
		
		Заявка77.Номенклатура = лТЧ.Номенклатура;
		глПересчетТаблЧасти(Заявка77, "Номенклатура");
				
		Если лСуммаВключаетНДС <> "" Тогда
			Заявка77.Цена = лТЧ.Цена;
			глПересчетТаблЧасти(Заявка77,"Цена");
		КонецЕсли; 
	КонецЦикла;

	Заявка77.Записать();
	   
	ЗаписатьСоответствие(Заявка77.ТекущийДокумент(),лИдентификаторЗаказа);
КонецПроцедуры
  
//*****************************************************************************
Процедура ОтправитьДанные()
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	
	ХмлДокумент = Анализатор.СоздатьДокумент();
	ХмлДокумент.Кодировка = "UTF-8";

	лСписокУзлов = СоздатьОбъект("СписокЗначений");
            
	//-----------------
	//ВыборкаНужнойНоменклатуры(ХмлДокумент,лСписокУзлов);
	//ВыборкаКонтрагентов(ХмлДокумент,лСписокУзлов);
	//ВыборкаОрганизаций(ХмлДокумент,лСписокУзлов);
	//-----------------
	
	лИзмененныеДокументы = ПолучитьИзмененныеДокументы(1);
	лКоличествоОбъектовКВыгрузке = 0;
	
	лИзмененныеДокументы.ВыбратьСтроки();
	Пока лИзмененныеДокументы.ПолучитьСтроку() = 1 Цикл
		лДокумент = лИзмененныеДокументы.Документ;
		ХмлУзел = "";
		
		Если лДокумент.Вид() = "ЗаявкаПокупателя" Тогда
			ХмлУзел = ПолучитьХМЛЗаказа(ХмлДокумент,лДокумент);
		ИначеЕсли лДокумент.Вид() = "Реализация" Тогда
			ХмлУзел = ПолучитьХМЛРеализации(ХмлДокумент,лДокумент);
		КонецЕсли;
		
		Если ПустоеЗначение(ХмлУзел) = 0 Тогда
			лСписокУзлов.ДобавитьЗначение(ХмлУзел);
			лКоличествоОбъектовКВыгрузке = лКоличествоОбъектовКВыгрузке + 1;
		КонецЕсли;
		
	КонецЦикла;

	УпаковатьВКонтейнер(ХмлДокумент,лСписокУзлов);
	ХмлДокумент.Записать(ИсходящийФайл);
	
	Если лКоличествоОбъектовКВыгрузке > 0 Тогда
		Сообщить(ТекущееВремя() + " (" + ТекущаяДата() + ") Выгружено объектов: " + лКоличествоОбъектовКВыгрузке);
	КонецЕсли;
	
КонецПроцедуры

//*****************************************************************************
Процедура ПолучитьДанные()
	
	лСтрокаХМЛ = ПолучитьТекстХМЛИзФайлаУТФ8(ВходящийФайл);
	
	Анализатор = СоздатьОбъект("AddIn.XMLParser");
	ФайлДанных = Анализатор.СоздатьДокумент();
	ФайлДанных.ЗагрузитьИзСтроки(лСтрокаХмл);
	
	Корень = ФайлДанных.ВыбратьУзел("Message");
		
	Ур1 = Корень.ВыбратьУзел("Header"); 
	Ур2 = Ур1.ВыбратьУзел("Confirmation");
	
	//Ур3 = Ур2.ВыбратьУзел("MessageNo");
	//лНомерОтправленногоСообщения = Ур3.Значение;
	
	Ур3 = Ур2.ВыбратьУзел("ReceivedNo");
	ReceivedNo = Ур3.Значение;
	
	Ур1 = Корень.ВыбратьУзел("Body");
 	                                    
 	лКоличествоОбъектов = Ур1.КоличествоПодчиненных();
 	
 	Для Сч = 1 По лКоличествоОбъектов Цикл
 		лОбъект = Ур1.ПолучитьПодчиненныйПоНомеру(Сч);
 		
 		Если лОбъект.Наименование = "Документ.ЗаказКлиента" Тогда
 			ЗагрузитьЗаказКлиента(лОбъект);
 		КонецЕсли;
 	КонецЦикла;
 	
 	ОчиститьИзмененныеОбъекты(ReceivedNo);
 	
КонецПроцедуры

//*****************************************************************************
//*****************************************************************************

ПрефиксУзлаEDI = "EDI";
ИмяФайлаДБФ = КаталогИБ() + "ref7ref8.dbf";
ИмяИндексаДБФ = СтрЗаменить(ИмяФайлаДБФ,".dbf",".cdx");
