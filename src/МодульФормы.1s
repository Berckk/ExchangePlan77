Перем
	МинДата,
	ФайлДБФ,
	КодЭтогоУзлаEnterpriseData, // Идентификатор этой базы в узле корреспондента.
	КодУзлаКорреспондентаEnterpriseData, // Идентификатор базы корреспондента.
	ЗапросСКЛ,
	ПарсерХМЛ,
	ИмяФайлаДБФ,	// Файл для хранения соответсвий
	ИмяФайлаИндексаДБФ,	// Индекс базы соответствий
	ВходящийФайл,	// Message_ЭД_ЦБ.xml
	ИсходящийФайл,	// Message_ЦБ_ЭД.xml
	ПрефиксУзлаУРБД;	// Код переферийной базы для обмена
	
Процедура ОбновитьДанныеРеализации(пДокРеализации,пТаблицаКорректировок) Далее
Функция ПолучитьХМЛРеализации(пХмлДокумент,пДокРеализации,пРазрешенаВыгрузкаБезЗаказа = 0) Далее
Функция ПолучитьХМЛНоменклатура(пХмлДокумент,пЭл) Далее
Функция ПолучитьХМЛКонтрагента(пХмлДокумент,пЭл) Далее
Функция ПолучитьХМЛОрганизации(пХмлДокумент,пЭл) Далее
Функция ПолучитьХМЛЗаказа(пХмлДокумент,пДокЗаказа,пРазрешенаВыгрузкаЗаказаНеОтКорр = 0)  Далее

	
//*****************************************************************************
Процедура ИзменитьКодовуюСтраницуФайла(имяФайла, исходнКодировка, нужнаяКодировка)
    Если ФС.СуществуетФайл(имяФайла) = 0 Тогда
        Сообщить("Файл " + имяФайла + " - не найден! Изменение кодировки отменено.", "!");
        Возврат;
    КонецЕсли;
    ScrptCtrl = СоздатьОбъект("MSScriptControl.ScriptControl");
    ScrptCtrl.Language = "VBScript";
    ScrptCtrl.AddCode("
        |Function StrConv(Text,SourceCharset,DestCharset)
        |    Set Stream=CreateObject(""ADODB.Stream"")
        |    Stream.Type=2
        |    Stream.Mode=3
        |    Stream.Open
        |    Stream.Charset=DestCharset
        |    Stream.WriteText Text
        |    Stream.Position=0
        |    Stream.Charset=SourceCharset
        |    StrConv=Stream.ReadText
        |End Function
        |
        |sub ConvertCodepage( fileName, SourceCharset, DestCharset )
        |    set fs = CreateObject(""Scripting.FilesystemObject"")
        |    originalText = fs.openTextFile(fileName,1).readAll()
        |    convertedText = strConv(originalText, SourceCharset, DestCharset )
        |    fs.openTextFile(fileName,2,true).write(convertedText)
        |end sub
        |
        |");
    Module        = ScrptCtrl.Modules("Global");
    CodeObject    = Module.CodeObject;
    CodeObject.ConvertCodepage(имяФайла, исходнКодировка, нужнаяКодировка);
    //ВОЗМОЖНЫЕ ВАРИАНТЫ КОДИРОВОК
    //"UTF-8"
    //"KOI8-R"
    //"Windows-1251"
    //"ISO-8859-5"
КонецПроцедуры	

//*****************************************************************************
Процедура ЗагрузитьНастройкиОбмена()
	лНастройки = "";
	
	ЗначениеИзФайла(КаталогИБ() + "EnterpriseData.cfg",лНастройки);
	
	Если ПустоеЗначение(лНастройки) = 0 Тогда
		КаталогОбмена = лНастройки.Получить("КаталогОбмена");

		MessageNo = лНастройки.Получить("MessageNo");
		MessageNoKorr = лНастройки.Получить("MessageNoKorr");
		ReceivedNo = лНастройки.Получить("ReceivedNo");
	КонецЕсли;
КонецПроцедуры	// СохранитьНастройкиОбмена

//*****************************************************************************
Процедура СохранитьНастройкиОбмена()
	лНастройки = СоздатьОбъект("СписокЗначений");
	лНастройки.ДобавитьЗначение(КаталогОбмена,"КаталогОбмена");
	
	// Информационно. Не влияет на логику выгрузки/загрузки.
	лНастройки.ДобавитьЗначение(MessageNo,"MessageNo");
	лНастройки.ДобавитьЗначение(MessageNoKorr,"MessageNoKorr");
	лНастройки.ДобавитьЗначение(ReceivedNo,"ReceivedNo");
	
	ЗначениеВФайл(КаталогИБ() + "EnterpriseData.cfg",лНастройки);
КонецПроцедуры	// СохранитьНастройкиОбмена

//*****************************************************************************
Функция ПолучитьТекстХМЛИзФайлаУТФ8(пИмяФайла)
	// Функция создана исключительно для обхода проблем парсинга через msxml4.dll
	
	лВременныйФайл = пИмяФайла + "_";
	ФС.КопироватьФайл(пИмяФайла,лВременныйФайл,0);                       
	ИзменитьКодовуюСтраницуФайла(лВременныйФайл,"UTF-8","Windows-1251");
	
	лТекст = СоздатьОбъект("Текст");
	лТекст.Открыть(лВременныйФайл);
	лКоличествоСтрок = лТекст.КоличествоСтрок();
	Для Сч = 1 по лКоличествоСтрок Цикл
		лСтрокаХМЛ = лСтрокаХМЛ + лТекст.ПолучитьСтроку(Сч);
	КонецЦикла;
	
	ФС.УдалитьФайл(лВременныйФайл);
	                                                
	лСтрокаХмл = СтрЗаменить(лСтрокаХмл,"msg:",""); 
	лСтрокаХмл = СтрЗаменить(лСтрокаХмл," xmlns=""http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2""","");
	
	Возврат лСтрокаХМЛ;
КонецФункции	// ПолучитьТекстИзФайла

//*****************************************************************************
Функция ДатуВХмл(пДата,пВремя = "00:00:00") // на выходе - "2016-12-15T00:00:00"
	
	лДатаДень = Прав("0" + ДатаЧисло(пДата),2);
	лДатаМесяц = Прав("0" + ДатаМесяц(пДата),2);
	лРезультат = "" + ДатаГод(пДата) + "-" + 
		лДатаМесяц + "-" + 
		лДатаДень + 
		?(пВремя <> "","T" + пВремя,"");
	
	Возврат лРезультат;
КонецФункции	// ДатуВХмл

//*****************************************************************************
Функция ЧислоВХекс(пЧисло)
	
	лМладшиеБиты = пЧисло % 16;
    лСтаршиеБиты = Цел(пЧисло/16);
    
    Если лСтаршиеБиты > 0 Тогда
        лРезультат = ЧислоВХекс(лСтаршиеБиты);
    Иначе
        лРезультат = "";
    КонецЕсли;
    
    ХексСимволы = "0123456789abcdef";
                   
	Возврат лРезультат + Сред(ХексСимволы, лМладшиеБиты + 1, 1);	
    
КонецФункции	// ЧислоВХекс

//*****************************************************************************
Функция ХексВЧисло(пХекс)
	
	лМладшиеБиты = Прав(пХекс, 1);
    лСтаршиеБиты = Лев(пХекс, СтрДлина(пХекс) - 1);
    
    ХексСимволы = "0123456789abcdef";
	
    лРезультат = Найти(ХексСимволы, лМладшиеБиты) - 1;
	
	Если лРезультат = -1 Тогда              
		ош = 1/0; // Ошибка! Параметр не является HEX-значением.
	КонецЕсли;
    
    Если лСтаршиеБиты = "" Тогда
        Возврат лРезультат;
    Иначе
        Возврат ХексВЧисло(лСтаршиеБиты) * 16 + лРезультат;
    КонецЕсли;	
	
КонецФункции	// ХексВЧисло

//*****************************************************************************
Функция СтрокуВХекс(пИсходнаяСтрока)
	
	лДлинаСтроки = СтрДлина(пИсходнаяСтрока);
	лРезультат = "";
	
	Для НомерПозиции = 1 По лДлинаСтроки Цикл
		лСимвол = Сред(пИсходнаяСтрока,НомерПозиции,1);
		лКодСимвола = КодСимв(лСимвол);
		
		лРезультат = лРезультат + ЧислоВХекс(лКодСимвола);
	КонецЦикла;
	
	Возврат лРезультат
	
КонецФункции	// СтрокуВХекс
                              
//*****************************************************************************
Функция ХексВСтроку(пХексСтрока)
	лКоличествоПар = СтрДлина(пХексСтрока) / 2;
	лРезультат = "";
	
	Для лНомерПары = 1 По лКоличествоПар Цикл       
		лНачалоПары = (лНомерПары - 1) * 2 + 1;
		лПараСимволов = Сред(пХексСтрока,лНачалоПары,2);
		
		лРезультат = лРезультат + Симв(ХексВЧисло(лПараСимволов));
	КонецЦикла;
	
	Возврат лРезультат
КонецФункции	// ХексВСтроку


//*****************************************************************************
Функция ПолучитьУникальныйИдентификатор(пСсылка)
	// На выходе должна получиться строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	// X - тип ссылка (справочник, документ). Символ в HEX
	// Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	// Z - ИД объекта. Строка в HEX
                                   
	Если ПустоеЗначение(пСсылка) = 1 Тогда
		Возврат "00000000-0000-0000-0000-000000000000";
	КонецЕсли;
	
	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = ЗначениеВСтрокуВнутр(пСсылка);
	
	// "B","0","0","84","0","0","         1   "
	лСтрокаСРазделителями = Сред(лВнутрСтрока,2,СтрДлина(лВнутрСтрока)-2);
	
	лСписок = СоздатьОбъект("СписокЗначений");
	лСписок.ИзСтрокиСРазделителями(лСтрокаСРазделителями);
	
	лТип = лСписок.ПолучитьЗначение(1); // "B"
	лВид = лСписок.ПолучитьЗначение(4); // "84" - предполагается, что это всегда число, 4-ре цифры.
	лИДОбъекта = лСписок.ПолучитьЗначение(7); // "         1   "
	
	// Преобразование только типизированных значений. 
	// Длина идентификатора должна быть равной 13 символов.
	Если СтрДлина(лИДОбъекта) <> 13 Тогда
		Если СтрДлина(лИДОбъекта) = 23 Тогда // "{"O","0","0","0","0","0","      2457   2231945ЦБ "}"
			лВид = СокрЛП(Лев(лИдОбъекта,10));
			лИДОбъекта = Прав(лИДОбъекта,13);
		Иначе	
			ош = 1/0; // Ошибка! Длина идентификатора ожидается 13 символов.
		КонецЕсли;
	КонецЕсли;
	
	// "42008420202020202020202031202020"
	лРезультат = СтрокуВХекс(лТип) + Формат(лВид,"Ч(0)4") + СтрокуВХекс(лИДОбъекта);
                          
	// "42008420-2020-2020-2020-202031202020"
	лРезультат = Лев(лРезультат,8) + "-" + 
		Сред(лРезультат,9,4) + "-" + 
		Сред(лРезультат,13,4) + "-" + 
		Сред(лРезультат,17,4) + "-" + 
		Прав(лРезультат,12);
	          
	Возврат лРезультат;
КонецФункции	// ПолучитьУникальныйИдентификатор

//*****************************************************************************
Функция ПолучитьСсылкуПоИдентификатору(пИдентификатор)
	// На входе строка вида "XXYYYYZZ-ZZZZ-ZZZZ-ZZZZ-ZZZZZZZZZZZZ"
	//   X - тип ссылка (справочник, документ). Символ в HEX
	//   Y - вид (номенклатура, реализация). Число, 4-ре цифры.
	//   Z - ИД объекта. Строка в HEX
	// На выходе ссылка на документ/справочник
	
	Если СтрДлина(пИдентификатор) <> 36 Тогда
		ош = 1/0; // Ошибка! Длина идентификатора ожидается 36 символов.
	КонецЕсли;
	
	// "42008420-2020-2020-2020-202031202020"
	// "42008420202020202020202031202020"
	лСтрока = СтрЗаменить(пИдентификатор,"-","");
	 
	лТип = Лев(лСтрока,2); // "42"
	лВид = Строка(Число(Сред(лСтрока,3,4))); // "84"
	лИДОбъекта = Прав(лСтрока,26); // "20202020202020202031202020"
	  
	// {"B","0","0","84","0","0","         1   "}
	лВнутрСтрока = "{"""+ХексВСтроку(лТип)+""",""0"",""0"","""+лВид+""",""0"",""0"","""+ХексВСтроку(лИДОбъекта)+"""}";
	
	лРезультат = ЗначениеИзСтрокиВнутр(лВнутрСтрока);
	
	Возврат лРезультат;
КонецФункции
              
//*****************************************************************************
Процедура ЗаписатьСоответствие(пСсылка,пИдентификатор8)

	Если ФайлДбф.Открыта() = 0 Тогда
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяФайлаИндексаДБФ,0);
	КонецЕсли;
	
	ФайлДбф.Добавить();
	ФайлДбф.ref77 = ПолучитьУникальныйИдентификатор(пСсылка);
	ФайлДбф.ref8 = пИдентификатор8;
	ФайлДбф.Записать();

КонецПроцедуры                         

//*****************************************************************************
Функция ПолучитьСсылкуПоИдентификаторуКорреспондента(пИдентификатор8)
	
	лРезультат = "";
	
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 1 Тогда
		Если ФайлДбф.Открыта() = 0 Тогда
			ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяФайлаИндексаДБФ,0);
		КонецЕсли;
		
		ФайлДбф.ТекущийИндекс("idxref8");
		Если ФайлДбф.Найти(пИдентификатор8,0) = 1 Тогда
			лРезультат = ПолучитьСсылкуПоИдентификатору(ФайлДбф.ref77);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

//*****************************************************************************
Процедура СоздатьИндекс()
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 1 Тогда
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ);
		ФайлДбф.ДобавитьИндекс("idxref77","ref77",1,0,"");
		ФайлДбф.ДобавитьИндекс("idxref8","ref8",1,0,"");
		Сообщить("Переиндексация: " + ИмяФайлаИндексаДБФ);
		ФайлДБФ.СоздатьИндексныйФайл(ИмяФайлаИндексаДБФ);
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Функция ПолучитьИдентификаторКорреспондентаПоСсылке(пСсылка)
	                                                    
	лРезультат = "";
	
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 1 Тогда
		лИдентификатор77 = ПолучитьУникальныйИдентификатор(пСсылка);
		
		Если ФайлДбф.Открыта() = 0 Тогда
			ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяФайлаИндексаДБФ,0);
		КонецЕсли;
		
		ФайлДбф.ТекущийИндекс("idxref77");
		Если ФайлДбф.Найти(лИдентификатор77,0) = 1 Тогда
			лРезультат = ФайлДбф.ref8;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции 

//*****************************************************************************
Функция ЭтоБитаяСсылка(пСсылка)
	Если Найти(Строка(пСсылка),"Объект не найден") > 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции	// ЭтоБитаяСсылка

//*****************************************************************************
Процедура УвеличитьMessageNo()
	// Увеличивается номер исходящего пакета для узла УРБД
	// Для вновь изменных данных заполняется идентификатор отправленного пакета.
	
	лТекстЗапроса = "SELECT max(DWNLDID) FROM _1SDWNLDS WHERE DIRECT = 'O'";
	лТЗ = ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса); // Здесь нужно установить блокировку таблицы до записи.
	
	Если лТЗ.КоличествоСтрок() = 1 Тогда
		НомерИсходящейКвитанции = лТЗ.ПолучитьЗначение(1,1);
		НомерИсходящейКвитанции = _StrToId(Лев(НомерИсходящейКвитанции,6));
	Иначе
		// На случай если УРБД с нуля.
		НомерИсходящейКвитанции = 0;
	КонецЕсли;
	
	лMessageNo = НомерИсходящейКвитанции + 1;

	лИдентификаторПакета = _IdToStr(лMessageNo) + ЦентральнаяИБКод();
	
	лТекстЗапроса = "INSERT INTO _1SDWNLDS VALUES ('" + лИдентификаторПакета + "','" + ПрефиксУзлаУРБД + "','O','')";
	
	Если ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса) = 1 Тогда
		
		// Заполняем идентификатор пакета для новых измененных данных.
		лТекстЗапроса = "UPDATE _1SUPDTS SET DWNLDID = '" + лИдентификаторПакета + "' WHERE DBSIGN = '" + ПрефиксУзлаУРБД + "' AND DWNLDID = ''";
		
		ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса);
		
		MessageNo = лMessageNo;
	Иначе
		ош = 1/0; // Ошибка при увеличении MessageNo. 
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Процедура АктивироватьНовыйУзел()
	// Инициализация новой переферийной базы без первой выгрузки данных.
	// Перед активацией необходимо создать переферийную базу через конфигуратор.
	// После активации необходимо выгнать всех из базы.
	
	лТекстЗапроса = "UPDATE _1SDBSET SET DBSTATUS = 'C' WHERE DBSIGN = '" + ПрефиксУзлаУРБД + "' AND DBSTATUS = 'N'";
	Если ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса) = 1 Тогда
		Сообщить("Инициализация узла с кодом """ + ПрефиксУзлаУРБД + """ успешна завершена.");
		Предупреждение("Необходимо перезапустить ИБ!");
	Иначе
		Сообщить("Новый узел с кодом """ + ПрефиксУзлаУРБД + """ не обнаружен.");
	КонецЕсли;
	
КонецПроцедуры
    
//*****************************************************************************
Функция ПолучитьИзмененныеДокументы(ЭтоВыгрузка = 0)
	
	лРезультат = СоздатьОбъект("ТаблицаЗначений");
	лРезультат.НоваяКолонка("Ссылка");
	
	лТекстЗапроса ="
					|SELECT
					|	TYPEID as Вид,
					|	OBJID as ИДОбъекта,
					|	DELETED as ПризнакУдаления
					|FROM
					|	_1SUPDTS
					|WHERE
					|	DBSIGN = '" + ПрефиксУзлаУРБД + "'";
					
	лТЗ = ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса);
	
	Если ЭтоВыгрузка = 1 Тогда
		УвеличитьMessageNo();
	КонецЕсли;
	
	лТЗ.ВыбратьСтроки();
	Пока лТЗ.ПолучитьСтроку() = 1 Цикл    
		Если СтрДлина(лТЗ.ИДОбъекта) <> 9  Тогда                   
			// Предполагается, что длина ИД равна 9 символов.
			ош = 1/0; // Ошибка! Сбой в получения измененных данных.
		КонецЕсли;
		
		лИДБазы = Прав(лТЗ.ИДОбъекта,3);
		лИДОбъекта = _StrToID(Лев(лТЗ.ИДОбъекта,6));
		лПолныйИД = Прав("      " + лИДОбъекта + лИДБазы,13);
		
		// Документ
		лВнутрСтрока = "{""O"",""0"",""0"",""" + лТЗ.Вид + """,""0"",""0"",""" + лПолныйИД + """}";
		лОбъект = ЗначениеИзСтрокиВнутр(лВнутрСтрока);
		
		Если ПустоеЗначение(лОбъект) = 1 Тогда
			Продолжить;
		ИначеЕсли ЭтоБитаяСсылка(лОбъект) = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		лРезультат.НоваяСтрока();
		лРезультат.Ссылка = лОбъект;
	КонецЦикла;
	
	Возврат лРезультат;
КонецФункции

//*****************************************************************************
Процедура ОчиститьИзмененныеОбъекты(пНомерКвитанции = 0)
	     
	Если пНомерКвитанции = 0 Тогда
		Если Вопрос("Очистить измененные объекты?","Да+Нет+Отмена") <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если пНомерКвитанции <> 0 Тогда
		лИдентификаторПакета = _IdToStr(пНомерКвитанции) + ТекущаяИБКод();
		лТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ПрефиксУзлаУРБД + 
			"' AND DWNLDID <= '" + лИдентификаторПакета + "'" +
			" AND DWNLDID > '         '";
	Иначе
		лТекстЗапроса ="DELETE FROM _1SUPDTS WHERE DBSIGN = '" + ПрефиксУзлаУРБД + "'";
	КонецЕсли;
	
	лКоличествоУдаленных = ЗапросСКЛ.ВыполнитьИнструкцию(лТекстЗапроса);
	
	Если пНомерКвитанции = 0 Тогда // Значит интерактив
		Сообщить("Очищено зарегистрированных изменений: " + лКоличествоУдаленных);
	КонецЕсли;
КонецПроцедуры	// ОчиститьИзмененныеОбъекты()

//*****************************************************************************
Процедура ВложитьСтруктуруВУзелХМЛ(пУзел,пСтруктура)
	
	Для Номер = 1 По пСтруктура.РазмерСписка() Цикл
		лИмяЭлемента = "";
		лЭлементСписка = пСтруктура.ПолучитьЗначение(Номер,лИмяЭлемента);
		
		Если ТипЗначенияСтр(лЭлементСписка) = "СписокЗначений" Тогда
			лУзел = пУзел.СоздатьПодчиненныйЭлемент(лИмяЭлемента);
			ВложитьСтруктуруВУзелХМЛ(лУзел,лЭлементСписка);
		ИначеЕсли ПустоеЗначение(лЭлементСписка) = 0 Тогда			
			лУзел = пУзел.СоздатьПодчиненныйЭлемент(лИмяЭлемента);
			лУзел.Значение = лЭлементСписка;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

//*****************************************************************************
Процедура ДобавитьДопРеквизит(пУзелДопРеквизитов,пИмя,пТип,пЗначение)
	Ур1 = пУзелДопРеквизитов.СоздатьПодчиненныйЭлемент("Строка");
	
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("ЗначениеСвойства");
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент(пТип);
		Ур3.Значение = пЗначение;
		
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("Свойство");
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("Наименование");
		Ур3.Значение = пИмя;
КонецПроцедуры	// ДобавитьДопРеквизит
    

//*****************************************************************************
Процедура УпаковатьВКонтейнер(пХмлДокумент,пСписокУзлов)
	
	лИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	
	Ур1 = пХмлДокумент.СоздатьПодчиненныйЭлемент("Message");
	Ур1.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema-instance","xsi");
	Ур1.УстановитьПространствоИмен("http://www.1c.ru/SSL/Exchange/Message","msg");
	Ур1.УстановитьПространствоИмен("http://www.w3.org/2001/XMLSchema","xs");
	
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("msg:Header");	
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:Format");	
		Ур3.Значение = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2";
		
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:CreationDate");	
		Ур3.Значение = ДатуВХмл(ТекущаяДата(),ТекущееВремя());
			
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:Confirmation");
			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:ExchangePlan");
			Ур4.Значение = лИмяПланаОбмена;
	
			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:To");
			Ур4.Значение = КодУзлаКорреспондентаEnterpriseData;

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:From");
			Ур4.Значение = КодЭтогоУзлаEnterpriseData;

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:MessageNo");
			Ур4.Значение = Строка(MessageNo);

			Ур4 = Ур3.СоздатьПодчиненныйЭлемент("msg:ReceivedNo");
			Ур4.Значение = Строка(MessageNoKorr);
			
		Ур3 = Ур2.СоздатьПодчиненныйЭлемент("msg:AvailableVersion");
		Ур3.Значение = "1.2";
			
	Ур2 = Ур1.СоздатьПодчиненныйЭлемент("Body",,"http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	Для Номер = 1 По пСписокУзлов.РазмерСписка() Цикл
		лУзел = пСписокУзлов.ПолучитьЗначение(Номер);
		Ур2.ДобавитьПодчиненный(лУзел);
	КонецЦикла;
	
КонецПроцедуры

//*****************************************************************************
Функция ДатаИзСтроки(пДата) // "2014-05-25"
	лГод = Лев(пДата,4);
	лМесяц = Сред(пДата,6,2);
	лДень = Сред(пДата,9,2);
	
	лЗначение = Дата(лГод,лМесяц,лДень);
	Возврат  лЗначение;	
КонецФункции	// ДатаИзЕДИФормата(пДата)    
 
//*****************************************************************************
Процедура СообщитьОЗагрузкеВнешнейКомпоненты(пИмяКомпоненты)
	Если ЗагрузитьВнешнююКомпоненту(пИмяКомпоненты) = 1 Тогда
		Сообщить("Загружена внешняя компонента """ + пИмяКомпоненты + """");
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Процедура ЗагрузитьХМЛЗаказа(пУзелХмл)
	
	лИдентификаторЗаказа = "";
	лДатаДок = "";
	лОрганизация = "";
	лНаименованиеОрганизации = "";
	лКонтрагент = "";
	лНаименованиеКонтрагента = "";
	лКомментарий = "";
	лСуммаВключаетНДС = "";
	лНомерЗаказаПоДаннымКлиента = "";
	лГЛНАдреса = "";
	лДатаОтгрузки = "";
	лГрузополучатель = "";
	
	лТЧ = СоздатьОбъект("ТаблицаЗначений");
	лТЧ.НоваяКолонка("Номенклатура");
	лТЧ.НоваяКолонка("Количество");
	лТЧ.НоваяКолонка("Цена");
	
	//-------------------------------------
	//******************************************
	//************ ПАРСИНГ XML *****************

	лКоличествоОбъектов = пУзелХмл.КоличествоПодчиненных();
	 	
	Для СчУр1 = 1 По лКоличествоОбъектов Цикл
		Ур1 = пУзелХмл.ПолучитьПодчиненныйПоНомеру(СчУр1);
		
		Если Ур1.Наименование = "AdditionalInfo" Тогда //Комментарий
			лКомментарий = Ур1.Значение;
		ИначеЕсли Ур1.Наименование = "КлючевыеСвойства" Тогда
			
			Ур2 = Ур1.ВыбратьУзел("Ссылка");
			лИдентификаторЗаказа = Ур2.Значение;
			
			Ур2 = Ур1.ВыбратьУзел("Дата");
			лДатаДок = ДатаИзСтроки(Ур2.Значение);

			Если лДатаДок <= МинДата  Тогда
				лТекстСообщения = "Документ (заказ покупателя) не загружен по минимальной дате.";
				Сообщить(лТекстСообщения);
				ЗаписьЖурналаРегистрации(лТекстСообщения,,"Загрузка из узла """ + ПрефиксУзлаУРБД + """",,3); // Информация
				
				Возврат;
			КонецЕсли;
			
			Ур2 = Ур1.ВыбратьУзел("Организация");
				Ур3 = Ур2.ВыбратьУзел("Ссылка");
				лОрганизация = ПолучитьСсылкуПоИдентификатору(Ур3.Значение);

				Ур3 = Ур2.ВыбратьУзел("Наименование");
				лНаименованиеОрганизации = Ур3.Значение;
				
		ИначеЕсли Ур1.Наименование = "Валюта" Тогда
		ИначеЕсли Ур1.Наименование = "Сумма" Тогда
		ИначеЕсли Ур1.Наименование = "Контрагент" Тогда
			
			Ур2 = Ур1.ВыбратьУзел("Ссылка");
			лКонтрагент = ПолучитьСсылкуПоИдентификатору(Ур2.Значение);
			
			Ур2 = Ур1.ВыбратьУзел("Наименование");
			лНаименованиеКонтрагента = Ур2.Значение;
			
		ИначеЕсли Ур1.Наименование = "ДанныеВзаиморасчетов" Тогда
		ИначеЕсли Ур1.Наименование = "СуммаВключаетНДС" Тогда
			лСуммаВключаетНДС = ?(Ур1.Значение = "true",1,0);
		ИначеЕсли Ур1.Наименование = "Товары" Тогда
			
			лКоличествоПозиций = Ур1.КоличествоПодчиненных();
			
			Для СчНомерПозиции = 1 По лКоличествоПозиций Цикл
				лТЧ.НоваяСтрока();
				
				Ур2 = Ур1.ПолучитьПодчиненныйПоНомеру(СчНомерПозиции);
					
				лКоличествоРеквизитовТЧ = Ур2.КоличествоПодчиненных();
				
				Для СчНомерРеквизитаТЧ = 1 По лКоличествоРеквизитовТЧ Цикл
					
					Ур3 = Ур2.ПолучитьПодчиненныйПоНомеру(СчНомерРеквизитаТЧ);
					
					Если Ур3.Наименование = "ДанныеНоменклатуры" Тогда
						Ур4 = Ур3.ВыбратьУзел("Номенклатура");
						Ур5 = Ур4.ВыбратьУзел("Ссылка");
						лТЧ.Номенклатура = ПолучитьСсылкуПоИдентификатору(Ур5.Значение);
					ИначеЕсли Ур3.Наименование = "Цена" Тогда
						лТЧ.Цена = Число(Ур3.Значение);
					ИначеЕсли Ур3.Наименование = "Количество" Тогда
						лТЧ.Количество = Число(Ур3.Значение);
					КонецЕсли;
					
				КонецЦикла
			КонецЦикла;
			
		ИначеЕсли Ур1.Наименование = "ДополнительныеРеквизиты" Тогда
			лКоличествоДопРеквизитов = Ур1.КоличествоПодчиненных();
			
			Для СчНомерДопРеквизита = 1 По лКоличествоДопРеквизитов Цикл
				Ур3 = Ур1.ПолучитьПодчиненныйПоНомеру(СчНомерДопРеквизита);
				
				УрЗначение = Ур3.ВыбратьУзел("ЗначениеСвойства");

				Ур4 = Ур3.ВыбратьУзел("Свойство");
				Ур5 = Ур4.ВыбратьУзел("Наименование");
				лНаименованиеСвойства = Ур5.Значение;
				
				Если лНаименованиеСвойства = "НомерПоДаннымКлиента" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лНомерЗаказаПоДаннымКлиента = лЗначениеСвойства;
				ИначеЕсли лНаименованиеСвойства = "ГЛНТочкиДоставки" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лГЛНАдреса = СокрЛП(лЗначениеСвойства);
				ИначеЕсли лНаименованиеСвойства = "ЖелаемаяДатаОтгрузки" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Дата").Значение;
					лДатаОтгрузки = ДатаИзСтроки(лЗначениеСвойства);
				ИначеЕсли лНаименованиеСвойства = "Грузополучатель" Тогда
					лЗначениеСвойства = УрЗначение.ВыбратьУзел("Строка").Значение;
					лГрузополучатель = ПолучитьСсылкуПоИдентификатору(лЗначениеСвойства);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	КонецЦикла;
	
	//******************************************
	//************ СОЗДАНИЕ ЗАКАЗА**************
	
	//Если заказ есть, обновляем (если не проведен), иначе добавляем новый Документ.
	Заявка77 = СоздатьОбъект("Документ.ЗаявкаПокупателя");
	лЭтоОбновлениеДокумента = 0;
	
	лСсылкаНаЗаявкуВБазе = ПолучитьСсылкуПоИдентификаторуКорреспондента(лИдентификаторЗаказа);
	
	Если ПустоеЗначение(лСсылкаНаЗаявкуВБазе) = 0 Тогда
		
		Если лСсылкаНаЗаявкуВБазе.Выбран() = 0 Тогда //Документ был удален из ЦБ
			Заявка77.Новый();
		ИначеЕсли лСсылкаНаЗаявкуВБазе.Проведен() = 1 Тогда 
			Сообщить("Заказ проведён (обновление отменено): " + лСсылкаНаЗаявкуВБазе);
			Возврат;
		Иначе
			Заявка77.НайтиДокумент(лСсылкаНаЗаявкуВБазе);
			лЭтоОбновлениеДокумента = 1;
		КонецЕсли;
	Иначе
		Заявка77.Новый();
	КонецЕсли;
	
	Заявка77.УдалитьСтроки();
	
	Если ПустоеЗначение(лОрганизация) = 1 Тогда
		лТекстСообщения = "Требуется синхронизация организации (выгрузите): " + лНаименованиеОрганизации;
		Сообщить(лТекстСообщения,"!");
		ЗаписьЖурналаРегистрации(лТекстСообщения,,"Загрузка из узла """ + ПрефиксУзлаУРБД + """",,4); // Предупреждение
	КонецЕсли;
	
	Если ПустоеЗначение(лКонтрагент) = 0 Тогда
		СпрАдрес = СоздатьОбъект("Справочник.Адреса");
		СпрАдрес.ИспользоватьВладельца(лКонтрагент);
		
		Если СпрАдрес.НайтиПоРеквизиту("Поле1",лГЛНАдреса,0) = 1 Тогда
			АдресМагазина = СпрАдрес.ТекущийЭлемент();
		Иначе
			АдресМагазина = ПолучитьПустоеЗначение();
		КонецЕсли; 
		
		Заявка77._Адрес = АдресМагазина;

		лДоговор = лКонтрагент.ОсновнойДоговор;
		лДатаОплаты = лДатаДок + лДоговор.ГлубинаКредита;
		лПроект = лКонтрагент._Проект;
		лФирма = лДоговор.ОснФирма;
		лВалюта = лДоговор.ВалютаВзаиморасчетов;

		Заявка77.Контрагент = лКонтрагент;  
		Заявка77.Проект = лПроект;
		Заявка77.Договор = лДоговор;
		Заявка77.Фирма = лФирма;
		Заявка77.ДатаОплаты = лДатаОплаты;
		Заявка77.Валюта = лВалюта;
		
		Если лСуммаВключаетНДС = "" Тогда 
			лТипЦен = лДоговор.ТипЦен;
			Заявка77.ТипЦен = лТипЦен;
			
			Если лКонтрагент.НДССверху = 1 Тогда
				Заявка77.СуммаВклНДС = 0;
			Иначе
				Заявка77.СуммаВклНДС = лТипЦен.ЦенаВклНДС;
			КонецЕсли;
		КонецЕсли;
	Иначе
		лТекстСообщения = "Требуется синхронизация контрагента (выгрузите): " + лНаименованиеКонтрагента;
		Сообщить(лТекстСообщения,"!");
		ЗаписьЖурналаРегистрации(лТекстСообщения,,"Загрузка из узла """ + ПрефиксУзлаУРБД + """",,4); // Предупреждение
	КонецЕсли;
	                                                            
	лПользователь = СоздатьОбъект("Справочник.Пользователи");
	Если лПользователь.НайтиПоКоду("EDILoader") = 1 Тогда
		лПользователь = лПользователь.ТекущийЭлемент();
	Иначе
		лПользователь = ПолучитьПустоеЗначение();
	КонецЕсли; 
	
	лВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку;	
	
	Заявка77.ДатаДок = лДатаДок;
	Заявка77.ВидОперации = лВидОперации;
	Заявка77.Курс = 1;
	Заявка77.УчитыватьНДС = 1;
	Заявка77.ДатаОтгрузки = лДатаОтгрузки;
	Заявка77.Автор = лПользователь;           
	Заявка77.Комментарий = лКомментарий;
	Заявка77.НомерЕди = лНомерЗаказаПоДаннымКлиента;
	Заявка77.СпособВвода = Перечисление.СпособыВвода.Авто;
	Заявка77.ГЛНДоставки = лГЛНАдреса;
	Заявка77.Грузополучатель = лГрузополучатель;
	
	//Если в xml есть тег СуммаВключаетНДС то цены брать из заказа
	Если лСуммаВключаетНДС <> "" Тогда 
		Заявка77.СуммаВклНДС = лСуммаВключаетНДС;
	КонецЕсли; 
	
	лТЧ.ВыбратьСтроки();
	Пока лТЧ.ПолучитьСтроку() = 1 Цикл
		Заявка77.НоваяСтрока();
		Заявка77.Количество = лТЧ.Количество;
		
		Заявка77.Номенклатура = лТЧ.Номенклатура;
		глПересчетТаблЧасти(Заявка77, "Номенклатура");
				
		Если лСуммаВключаетНДС <> "" Тогда
			Заявка77.Цена = лТЧ.Цена;
			глПересчетТаблЧасти(Заявка77,"Цена");
		КонецЕсли; 
	КонецЦикла;

	Заявка77.Записать();
	   
	Если лЭтоОбновлениеДокумента = 0 Тогда
		ЗаписатьСоответствие(Заявка77.ТекущийДокумент(),лИдентификаторЗаказа);
		Сообщить("Загружено: " + Заявка77.ТекущийДокумент());
	Иначе
		Сообщить("Обновлено: " + Заявка77.ТекущийДокумент());
	КонецЕсли;

КонецПроцедуры

//*****************************************************************************
Процедура ЗагрузитьХМЛРеализации(пУзелХмл)
	Перем лДокРеализации;
	Перем лДатаДок;
	
	лТЧ = СоздатьОбъект("ТаблицаЗначений");
	лТЧ.НоваяКолонка("Номенклатура");
	лТЧ.НоваяКолонка("КоличествоРаспределить","Число");
	лТЧ.НоваяКолонка("Цена","Число");
	
	//-------------------------------------
	//******************************************
	//************ ПАРСИНГ XML *****************

	лКоличествоОбъектов = пУзелХмл.КоличествоПодчиненных();
	 	
	Для СчУр1 = 1 По лКоличествоОбъектов Цикл
		Ур1 = пУзелХмл.ПолучитьПодчиненныйПоНомеру(СчУр1);
		
		Если Ур1.Наименование = "КлючевыеСвойства" Тогда
			
			Ур2 = Ур1.ВыбратьУзел("Ссылка");
			лДокРеализации = ПолучитьСсылкуПоИдентификатору(Ур2.Значение);

			Ур2 = Ур1.ВыбратьУзел("Дата");
			лДатаДок = ДатаИзСтроки(Ур2.Значение);
			
			Если лДатаДок <= МинДата  Тогда
				лТекстСообщения = "Документ (реализация) не загружен по минимальной дате.";
				Сообщить(лТекстСообщения);
				ЗаписьЖурналаРегистрации(лТекстСообщения,,"Загрузка из узла """ + ПрефиксУзлаУРБД + """",,3); // Информация
				
				Возврат;
			КонецЕсли;
			
			Если ЭтоБитаяСсылка(лДокРеализации) = 1 Тогда
				лТекстСообщения = "Документ реализации не обнаружен: " + лДокРеализации;
				Сообщить(лТекстСообщения);
				ЗаписьЖурналаРегистрации(лТекстСообщения,,"Загрузка из узла """ + ПрефиксУзлаУРБД + """",,5); // Ошибка
				
				Возврат;
			КонецЕсли;
		ИначеЕсли Ур1.Наименование = "Товары" Тогда
			
			лКоличествоПозиций = Ур1.КоличествоПодчиненных();
			
			Для СчНомерПозиции = 1 По лКоличествоПозиций Цикл
				лТЧ.НоваяСтрока();
				
				Ур2 = Ур1.ПолучитьПодчиненныйПоНомеру(СчНомерПозиции);
					
				лКоличествоРеквизитовТЧ = Ур2.КоличествоПодчиненных();
				
				Для СчНомерРеквизитаТЧ = 1 По лКоличествоРеквизитовТЧ Цикл
					
					Ур3 = Ур2.ПолучитьПодчиненныйПоНомеру(СчНомерРеквизитаТЧ);
					
					Если Ур3.Наименование = "ДанныеНоменклатуры" Тогда
						Ур4 = Ур3.ВыбратьУзел("Номенклатура");
						Ур5 = Ур4.ВыбратьУзел("Ссылка");
						лТЧ.Номенклатура = ПолучитьСсылкуПоИдентификатору(Ур5.Значение);
					ИначеЕсли Ур3.Наименование = "Количество" Тогда
						лТЧ.КоличествоРаспределить = Число(Ур3.Значение);
					ИначеЕсли Ур3.Наименование = "Цена" Тогда
						лТЧ.Количество = Число(Ур3.Значение);
					КонецЕсли;
					
				КонецЦикла
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеРеализации(лДокРеализации,лТЧ);
КонецПроцедуры

//*****************************************************************************
Функция КаталогОбменаУказан()
	Если ПустоеЗначение(КаталогОбмена) = 0 Тогда
		лКаталогОбмена = СокрЛП(КаталогОбмена);
		Если Прав(лКаталогОбмена,1) <> "\" Тогда
			лКаталогОбмена = лКаталогОбмена + "\";
		КонецЕсли;
			
		Если ФС.СуществуетФайл(лКаталогОбмена) = 1 Тогда
			ВходящийФайл = лКаталогОбмена + "Message_" + КодУзлаКорреспондентаEnterpriseData + "_" + КодЭтогоУзлаEnterpriseData + ".xml";
			ИсходящийФайл = лКаталогОбмена + "Message_" + КодЭтогоУзлаEnterpriseData + "_" + КодУзлаКорреспондентаEnterpriseData + ".xml";
			
			СохранитьНастройкиОбмена();
			
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
КонецФункции 

//*****************************************************************************
Процедура ДобавитьРучныеВыгрузки(пТЗ)
	
	лТЗ = СоздатьОбъект("ТаблицаЗначений");
	ЗначенияФильтра.Выгрузить(лТЗ);
	
	лТЗ.ВыбратьСтроки();
	Пока лТЗ.ПолучитьСтроку() = 1 Цикл
		лСсылка = лТЗ._1;
		
		Если ТипЗначенияСтр(лСсылка) = "Справочник" Тогда
			Если лСсылка.ЭтоГруппа() = 1 Тогда
				лВидСправочника = лСсылка.Вид();
				
				лСпр = СоздатьОбъект("Справочник." + лВидСправочника);
				лСпр.ИспользоватьВладельца(лСсылка);
				лСпр.ВыбратьЭлементы(1);
				Пока лСпр.ПолучитьЭлемент() = 1 Цикл
					Если лСпр.ЭтоГруппа() = 1 Тогда
						Продолжить;
					КонецЕсли;
					
					пТЗ.НоваяСтрока();
					пТЗ.Ссылка = лСпр.ТекущийЭлемент();
					пТЗ.РучнаяВыгрузка = 1;
				КонецЦикла;
				
				Продолжить;				
			КонецЕсли;
		КонецЕсли;
		
		пТЗ.НоваяСтрока();
		пТЗ.Ссылка = лСсылка;
		пТЗ.РучнаяВыгрузка = 1;
	КонецЦикла;
	
	пТЗ.Свернуть("Ссылка","РучнаяВыгрузка");
	
КонецПроцедуры	// ДобавитьРучныеВыгрузки
  
//*****************************************************************************
Процедура ОтправитьДанные()
	
	ХмлДокумент = ПарсерХМЛ.СоздатьДокумент();
	ХмлДокумент.Кодировка = "UTF-8";

	лСписокУзлов = СоздатьОбъект("СписокЗначений");
            
	лИзмененныеДокументы = ПолучитьИзмененныеДокументы(1);
	лИзмененныеДокументы.НоваяКолонка("РучнаяВыгрузка","Число");
	
	ДобавитьРучныеВыгрузки(лИзмененныеДокументы);
	лКоличествоОбъектовКВыгрузке = 0;
	
	лИзмененныеДокументы.ВыбратьСтроки();
	Пока лИзмененныеДокументы.ПолучитьСтроку() = 1 Цикл
		лОбъект = лИзмененныеДокументы.Ссылка;
		ХмлУзел = "";
		
		Если ТипЗначенияСтр(лОбъект) = "Документ" Тогда
			Если лОбъект.Вид() = "ЗаявкаПокупателя" Тогда
				ХмлУзел = ПолучитьХМЛЗаказа(ХмлДокумент,лОбъект,лИзмененныеДокументы.РучнаяВыгрузка);
			ИначеЕсли лОбъект.Вид() = "Реализация" Тогда
				ХмлУзел = ПолучитьХМЛРеализации(ХмлДокумент,лОбъект,лИзмененныеДокументы.РучнаяВыгрузка);
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(лОбъект) = "Справочник" Тогда 
			Если лОбъект.Вид() = "Контрагенты" Тогда
				ХмлУзел = ПолучитьХМЛКонтрагента(ХмлДокумент,лОбъект);
			ИначеЕсли лОбъект.Вид() = "Номенклатура" Тогда
				ХмлУзел = ПолучитьХМЛНоменклатура(ХмлДокумент,лОбъект);
			ИначеЕсли лОбъект.Вид() = "Фирмы" Тогда
				ХмлУзел = ПолучитьХМЛОрганизации(ХмлДокумент,лОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(ХмлУзел) = 0 Тогда
			лСписокУзлов.ДобавитьЗначение(ХмлУзел);
			лКоличествоОбъектовКВыгрузке = лКоличествоОбъектовКВыгрузке + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	УпаковатьВКонтейнер(ХмлДокумент,лСписокУзлов);
	ХмлДокумент.Записать(ИсходящийФайл);
	
	Если лКоличествоОбъектовКВыгрузке > 0 Тогда
		Сообщить(ТекущееВремя() + " (" + ТекущаяДата() + ") Выгружено объектов: " + лКоличествоОбъектовКВыгрузке);
	КонецЕсли;
	
КонецПроцедуры

//*****************************************************************************
Процедура ПолучитьДанные()
	
	Если ФС.СуществуетФайл(ВходящийФайл) = 0 Тогда
		Сообщить(ТекущееВремя() + " (" + ТекущаяДата() + ") Нет данных к загрузке.");
		Возврат;
	КонецЕсли;
	
	лСтрокаХМЛ = ПолучитьТекстХМЛИзФайлаУТФ8(ВходящийФайл);
	                  
	ФайлДанных = ПарсерХМЛ.СоздатьДокумент();
	ФайлДанных.ЗагрузитьИзСтроки(лСтрокаХмл);
	
	Корень = ФайлДанных.ВыбратьУзел("Message");
		
	Ур1 = Корень.ВыбратьУзел("Header"); 
	Ур2 = Ур1.ВыбратьУзел("Confirmation");
	
	Ур3 = Ур2.ВыбратьУзел("MessageNo");
	лMessageNoKorr = Число(Ур3.Значение);
	
	Если лMessageNoKorr <= MessageNoKorr Тогда
		Сообщить("Пакет №" + лMessageNoKorr + " был получен ранее. Загрузка не выполнена.");
		Возврат;
	КонецЕсли;
	
	Ур3 = Ур2.ВыбратьУзел("ReceivedNo");
	ReceivedNo = Ур3.Значение;
	
	Ур1 = Корень.ВыбратьУзел("Body");
 	                                    
 	лКоличествоОбъектов = Ур1.КоличествоПодчиненных();
 	
 	Для Сч = 1 По лКоличествоОбъектов Цикл
 		лОбъект = Ур1.ПолучитьПодчиненныйПоНомеру(Сч);
 		
 		Если лОбъект.Наименование = "Документ.ЗаказКлиента" Тогда
 			ЗагрузитьХМЛЗаказа(лОбъект);
 		ИначеЕсли лОбъект.Наименование = "Документ.РеализацияТоваровУслуг" Тогда
 			ЗагрузитьХМЛРеализации(лОбъект);
 		КонецЕсли;
 	КонецЦикла;
 	 
 	MessageNoKorr = лMessageNoKorr;
 	ОчиститьИзмененныеОбъекты(ReceivedNo);
 	
КонецПроцедуры

//*****************************************************************************
Процедура Синхронизировать(пНаправлениеОбмена = "") // Загрузка/Выгрузка
	Если КаталогОбменаУказан() = 0 Тогда
		Предупреждение("Укажите каталог обмена!",15);
		Возврат;
	КонецЕсли;  
	
	Если ФС.СуществуетФайл(ИмяФайлаДБФ) = 0 Тогда
		ФайлДбф.ДобавитьПоле("ref77","S",36,0);
		ФайлДбф.ДобавитьПоле("ref8","S",36,0);
		ФайлДбф.ДобавитьИндекс("idxref77","ref77",1,0,"");
		ФайлДбф.ДобавитьИндекс("idxref8","ref8",1,0,"");
		
		ФайлДбф.СоздатьФайл(ИмяФайлаДБФ,ИмяФайлаИндексаДБФ);
		
		Сообщить("Создано хранилище соответствий: " + ИмяФайлаДБФ);
	Иначе
		ФайлДбф.ОткрытьФайл(ИмяФайлаДБФ,ИмяФайлаИндексаДБФ,0);
	КонецЕсли;
	
	Если ФайлДбф.Открыта() = 0 Тогда
		Сообщить("Ошибка открытия файла: " + ИмяФайлаДБФ);
		СоздатьИндекс();
		Сообщить("Попробуйте ещё раз...");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Попытка
		Если пНаправлениеОбмена = "Загрузка" Тогда
			ПолучитьДанные();
			СохранитьНастройкиОбмена();
		ИначеЕсли пНаправлениеОбмена = "Выгрузка" Тогда
			ОтправитьДанные();
			СохранитьНастройкиОбмена();
		Иначе
			ПолучитьДанные();
			СохранитьНастройкиОбмена();
			ОтправитьДанные();
			СохранитьНастройкиОбмена();
		КонецЕсли;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ФайлДбф.ЗакрытьФайл();	
	
КонецПроцедуры	// Синхронизировать

//*****************************************************************************
Процедура ПриОткрытии()

	Если ТекущаяИБЦентральная() = 0 Тогда
		Сообщить("Обработка предназначена для работы только в ЦБ", "!!!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	        
	Попытка
		ПарсерХМЛ = СоздатьОбъект("AddIn.XMLParser");
	Исключение
		СообщитьОЗагрузкеВнешнейКомпоненты("v7plus.dll");
		ПарсерХМЛ = СоздатьОбъект("AddIn.XMLParser");
	КонецПопытки;
	
	
	Попытка 
		ЗапросСКЛ = СоздатьОбъект("ODBCRecordset");
	Исключение  
		СообщитьОЗагрузкеВнешнейКомпоненты("1cpp.dll");
		ЗапросСКЛ = СоздатьОбъект("ODBCRecordset");
	КонецПопытки;
	
	ФайлДбф = СоздатьОбъект("XBASE");
	
	ЗагрузитьНастройкиОбмена();
	
	Форма.кнОбмен.Заголовок("Обмен с узлом """ + ПрефиксУзлаУРБД + """");
	
	Если Форма.Параметр = "ЗапуститьСинхронизацию" Тогда
		Синхронизировать();
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

//*****************************************************************************
Функция ВыбратьТипВидОбъекта(пТипОбъекта,пВидОбъекта)

	лСписСправочников = СоздатьОбъект("СписокЗначений");
	лСписСправочников.ДобавитьЗначение("Номенклатура", "Номенклатура"); 
	лСписСправочников.ДобавитьЗначение("Контрагенты", "Контрагенты"); 
	лСписСправочников.ДобавитьЗначение("Фирмы", "Организации"); 
	
	лСписДокументов		= СоздатьОбъект("СписокЗначений");
	лСписДокументов.ДобавитьЗначение("ЗаявкаПокупателя", "Заявка покупателя");
	лСписДокументов.ДобавитьЗначение("Реализация", "Реализация");
	
	лСписВидов = СоздатьОбъект("СписокЗначений");
	лСписВидов.ДобавитьЗначение(лСписСправочников, "Справочник");
	лСписВидов.ДобавитьЗначение(лСписДокументов, "Документ");
	     
	лСписМетаОбъектов = СоздатьОбъект("СписокЗначений");
	лСписМетаОбъектов.ДобавитьЗначение("Справочник");
	лСписМетаОбъектов.ДобавитьЗначение("Документ");
	
	лРезультат = 1;
	
	Поз = "";
	Если лСписМетаОбъектов.ВыбратьЗначение(пТипОбъекта, "Выберите тип объекта", Поз, , 0) = 1 Тогда
		СписВидов = лСписВидов.Получить(пТипОбъекта);
		Если СписВидов.ВыбратьЗначение(пВидОбъекта, "Выберите вид объекта", Поз, , 0) = 0 Тогда
			пТипОбъекта		= "";
			лРезультат = 0;
		КонецЕсли;
	Иначе
		лРезультат = 0;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции	

//*****************************************************************************
Процедура УдалитьСтрокуСписка(Список)
	н = Список.ТекущаяСтрока();
	Если н > 0 Тогда
		Список.УдалитьЗначение(н);
		Если н > 1 Тогда
			Список.ТекущаяСтрока(Мин(н,Список.РазмерСписка()));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
Функция ВыбратьЗначенияФильтра(ФлагМножВыбора)
	лТип = "";
	лВид = "";
	
	Если ВыбратьТипВидОбъекта(лТип,лВид) = 1 Тогда
		ОткрытьПодбор(лТип + "." + лВид,,,ФлагМножВыбора);
	КонецЕсли;
КонецФункции

//*****************************************************************************
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	лПредставлениеЗначения = Строка(ВыбЗнач);
	
	Если ТипЗначенияСтр(ВыбЗнач) = "Справочник" Тогда
		Если ВыбЗнач.ЭтоГруппа() = 1 Тогда
			лПредставлениеЗначения = "[" + лПредставлениеЗначения + "]";
		КонецЕсли;
		
		лПредставлениеЗначения = ВыбЗнач.Вид() + ": " + лПредставлениеЗначения;
	КонецЕсли;
	
	Если ЗначенияФильтра.НайтиЗначение(ВыбЗнач) = 0 Тогда
		ЗначенияФильтра.ДобавитьЗначение(ВыбЗнач,лПредставлениеЗначения);
	КонецЕсли;
КонецПроцедуры	// ОбработкаПодбора

//*****************************************************************************
Процедура ОткрытьВыбранноеЗначение()
	н = ЗначенияФильтра.ТекущаяСтрока();
	
	ВыбЗначение = ЗначенияФильтра.ПолучитьЗначение(н);
	ОткрытьФорму(ВыбЗначение);
КонецПроцедуры	// ОткрытьЗначение

//*****************************************************************************
Процедура ДополнительныеКоманды()
	
	Перем ВыбМеню;

	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("ИзмененныеДанные","Измененные данные...");
	Меню.ДобавитьЗначение("ОчиститьИзменения","Очистить изменения");
	Меню.ДобавитьЗначение("НайтиОбъектПоГУИД","Найти объект по GUID");
	Меню.ДобавитьЗначение("АктивацияНовогоУзла","Активировать новый узел """ + ПрефиксУзлаУРБД + """");
	
	Если Меню.ВыбратьЗначение(ВыбМеню,,,,1) = 1 Тогда
		Если ВыбМеню = "ИзмененныеДанные" Тогда
			лТЗ = ПолучитьИзмененныеДокументы();
			лНомерВыбраннойСтроки = 0;
			лТЗ.ВыбратьСтроку(лНомерВыбраннойСтроки,"Зарегистрированные изменения документов");
			
			Если лНомерВыбраннойСтроки > 0 Тогда
				лЗнач = лТЗ.ПолучитьЗначение(лНомерВыбраннойСтроки,"Ссылка");
				ОткрытьФорму(лЗнач);
			КонецЕсли;
			
		ИначеЕсли ВыбМеню = "ОчиститьИзменения" Тогда
			ОчиститьИзмененныеОбъекты();
		ИначеЕсли ВыбМеню = "АктивацияНовогоУзла" Тогда
			АктивироватьНовыйУзел();
		ИначеЕсли ВыбМеню = "НайтиОбъектПоГУИД" Тогда
			лСтрокаГУИД = "";
			
			Если ВвестиСтроку(лСтрокаГУИД,"Введите GUID искомого объекта",36) = 1 Тогда
				лСсылка = ПолучитьСсылкуПоИдентификатору(лСтрокаГУИД);
				Если ЭтоБитаяСсылка(лСсылка) = 0 Тогда
					ОткрытьФорму(лСсылка);
				Иначе
					Предупреждение("Объект не найден! Ссылка не действительна.");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	// ДополнительныеКоманды

//*****************************************************************************
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем лИмяКаталога;
	
	Если ИдентЭлемДиалога = "КаталогОбмена" Тогда
	    СтатусВозврата(0);
		Если ФС.ВыбратьКаталог(лИмяКаталога, "Выбор каталога обмена данными", 60) = 1 Тогда
			КаталогОбмена = лИмяКаталога;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
Процедура ПоКнопкеВыбораНаправленияОбмена()
	Перем ВыбМеню;

	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("Загрузить","Загрузить");
	Меню.ДобавитьЗначение("Выгрузить","Выгрузить");
	
	Если Меню.ВыбратьЗначение(ВыбМеню,,,,1) = 1 Тогда
		Если ВыбМеню = "Загрузить" Тогда
			Синхронизировать("Загрузка");
		ИначеЕсли ВыбМеню = "Выгрузить" Тогда
			Синхронизировать("Выгрузка");
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

//*****************************************************************************
//*****************************************************************************
//*****************************************************************************
        
//*****************************************************************************
Функция ПолучитьХМЛНоменклатура(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ПолнНаименование);
	лКодВПрограмме = СокрЛП(пЭл.Код);
	лСтавкаНДС = пЭл.СтавкаНДС.Идентификатор();	//БезНДС, НДС18, НДС10
	лКодЕдиницыИзмерения = пЭл.БазоваяЕдиница.ОКЕИ.Код;
	лШтрихКод = пЭл.БазоваяЕдиница.ШтрихКод;
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Номенклатура","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКодВПрограмме,"КодВПрограмме");
	
	лСтруктураЕдиницаИзмерения = СоздатьОбъект("СписокЗначений");
	лСтруктураЕдиницаИзмерения.ДобавитьЗначение(лКодЕдиницыИзмерения,"Код");

	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение("Товар","ТипНоменклатуры");
	лСтруктура.ДобавитьЗначение(лСтруктураЕдиницаИзмерения,"ЕдиницаИзмерения");
	лСтруктура.ДобавитьЗначение(лСтавкаНДС,"СтавкаНДС");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Если ПустоеЗначение(лШтрихКод) = 0 Тогда
		ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
		ДобавитьДопРеквизит(ХмлДопРеквизиты,"ШтрихКод","Строка",лШтрихКод);
	КонецЕсли;
	
	Возврат ХмлНовыйУзел;
КонецФункции
               
//*****************************************************************************
Функция ПолучитьХМЛКонтрагента(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ЮрФизЛицо.ПолнНаименование);
	лИннКпп = пЭл.ЮрФизЛицо.ИНН;
	лИНН = Лев(лИннКпп,10);
	лКПП = Сред(лИннКпп,12);
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Контрагенты","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лИНН,"ИНН");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКПП,"КПП");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Сообщить("Выгружено: " + пЭл);

	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛОрганизации(пХмлДокумент,пЭл) 
	лСсылка = ПолучитьУникальныйИдентификатор(пЭл);
	
	лНаименование = СокрЛП(пЭл.Наименование);
	лНаименованиеПолное = СокрЛП(пЭл.ЮрЛицо.ПолнНаименование);
	лИннКпп = пЭл.ЮрЛицо.ИНН;
	лИНН = Лев(лИннКпп,10);
	лКПП = Сред(лИннКпп,12);
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Справочник.Организации","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылка,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименование,"Наименование");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНаименованиеПолное,"НаименованиеПолное");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лИНН,"ИНН");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лКПП,"КПП");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	Сообщить("Выгружено: " + пЭл);

	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛЗаказа(пХмлДокумент,пДокЗаказа,пРазрешенаВыгрузкаЗаказаНеОтКорр = 0) 
	лСсылкаКоррУзла = ПолучитьИдентификаторКорреспондентаПоСсылке(пДокЗаказа);
	
	Если ПустаяСтрока(лСсылкаКоррУзла) = 1 Тогда
		Если пРазрешенаВыгрузкаЗаказаНеОтКорр = 0 Тогда
			Сообщить("Заказ не выгружен (не был ранее получен из узла """ + ПрефиксУзлаУРБД + """): " + пДокЗаказа);
			Возврат "";
		Иначе
			лСсылкаКоррУзла = ПолучитьУникальныйИдентификатор(пДокЗаказа);
		КонецЕсли;
	КонецЕсли;
	
	лДатаЗаказа = ДатуВХмл(пДокЗаказа.ДатаДок);
	лНомерЗаказа = пДокЗаказа.НомерДок;
	лДатаОтгрузки = ДатуВХмл(пДокЗаказа.ДатаОтгрузки,"");
	
	лСсылкаОрганизации = ПолучитьУникальныйИдентификатор(пДокЗаказа.Фирма);
	лНаименованиеОрганизации = Строка(пДокЗаказа.Фирма);
	Если ПустаяСтрока(лНаименованиеОрганизации) = 1 Тогда
		лНаименованиеОрганизации = "НеИзвестно";
	КонецЕсли;
	
	лСсылкаКонтрагент = ПолучитьУникальныйИдентификатор(пДокЗаказа.Контрагент);
	лНаименованиеКонтрагента = Строка(пДокЗаказа.Контрагент);
	Если ПустаяСтрока(лНаименованиеКонтрагента) = 1 Тогда
		лНаименованиеКонтрагента = "НеИзвестно";
	КонецЕсли;
	
	лДокСтатус = ?(пДокЗаказа.Проведен() = 1, "Согласованно", "Не согласованно");
	
	лСуммаВключаетНДС = ?(пДокЗаказа.СуммаВклНДС = 1, "true", "false");
	лСуммаДокумента = пДокЗаказа.Итог("Сумма")	+ ?(пДокЗаказа.СуммаВклНДС = 1,0,пДокЗаказа.Итог("СуммаНДС"));
	
	// -------------------
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Документ.ЗаказКлиента","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лОрганизация = СоздатьОбъект("СписокЗначений");
	лОрганизация.ДобавитьЗначение(лСсылкаОрганизации,"Ссылка");
	лОрганизация.ДобавитьЗначение(лНаименованиеОрганизации,"Наименование");
	лОрганизация.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лКонтрагент = СоздатьОбъект("СписокЗначений");
	лКонтрагент.ДобавитьЗначение(лСсылкаКонтрагент,"Ссылка");
	лКонтрагент.ДобавитьЗначение(лНаименованиеКонтрагента,"Наименование");
	лКонтрагент.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	
	лВалюта = СоздатьОбъект("СписокЗначений");
	лВалюта.ДобавитьЗначение("643","Код");
	лВалюта.ДобавитьЗначение("RUB","Наименование");
	
	лДанныеВзаиморасчетов = СоздатьОбъект("СписокЗначений");
	лДанныеВзаиморасчетов.ДобавитьЗначение(1,"КурсВзаиморасчетов");
	
	лТовары = СоздатьОбъект("СписокЗначений");
	пДокЗаказа.ВыбратьСтроки();
	Пока пДокЗаказа.ПолучитьСтроку() = 1 Цикл                
		лКодЕдИзмерения = пДокЗаказа.Номенклатура.БазоваяЕдиница.ОКЕИ.Код;
		лСсылкаНоменклатура = ПолучитьУникальныйИдентификатор(пДокЗаказа.Номенклатура);
		лНаименованиеНоменклатуры = Строка(пДокЗаказа.Номенклатура);
                                                          
		лНоменклатура = СоздатьОбъект("СписокЗначений");
		лНоменклатура.ДобавитьЗначение(лСсылкаНоменклатура,"Ссылка");
		лНоменклатура.ДобавитьЗначение(лНаименованиеНоменклатуры,"Наименование");
		
		лДанныеНоменклатуры = СоздатьОбъект("СписокЗначений");
		лДанныеНоменклатуры.ДобавитьЗначение(лНоменклатура,"Номенклатура");
		
		лДанныеСтроки = СоздатьОбъект("СписокЗначений");
		лДанныеСтроки.ДобавитьЗначение(лДанныеНоменклатуры,"ДанныеНоменклатуры");

		лЕдИзмерения = СоздатьОбъект("СписокЗначений");
		лЕдИзмерения.ДобавитьЗначение(лКодЕдИзмерения,"Код");
		лДанныеСтроки.ДобавитьЗначение(лЕдИзмерения,"ЕдиницаИзмерения");
		
		лДанныеСтроки.ДобавитьЗначение(пДокЗаказа.Количество,"Количество");
		лДанныеСтроки.ДобавитьЗначение(пДокЗаказа.Сумма,"Сумма");
		лДанныеСтроки.ДобавитьЗначение(пДокЗаказа.Цена,"Цена");
		лДанныеСтроки.ДобавитьЗначение(пДокЗаказа.СтавкаНДС.Идентификатор(),"СтавкаНДС");
		лДанныеСтроки.ДобавитьЗначение(пДокЗаказа.СуммаНДС,"СуммаНДС");
		
		лТовары.ДобавитьЗначение(лДанныеСтроки,"Строка");
	КонецЦикла;
	
	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСсылкаКоррУзла,"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лДатаЗаказа,"Дата");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лНомерЗаказа,"Номер");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лОрганизация,"Организация");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение(лВалюта,"Валюта");
	лСтруктура.ДобавитьЗначение(лСуммаДокумента,"Сумма");
	лСтруктура.ДобавитьЗначение(лКонтрагент,"Контрагент");
	лСтруктура.ДобавитьЗначение(лДанныеВзаиморасчетов,"ДанныеВзаиморасчетов");
	лСтруктура.ДобавитьЗначение(лСуммаВключаетНДС,"СуммаВключаетНДС");
	лСтруктура.ДобавитьЗначение(лТовары,"Товары");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
	ДобавитьДопРеквизит(ХмлДопРеквизиты,"ДатаОтгрузки","Дата",лДатаОтгрузки);
	ДобавитьДопРеквизит(ХмлДопРеквизиты,"Статус","Строка",лДокСтатус);
	
	Сообщить("Выгружено: " + пДокЗаказа);
				
	Возврат ХмлНовыйУзел;
КонецФункции

//*****************************************************************************
Функция ПолучитьХМЛРеализации(пХмлДокумент,пДокРеализации,пРазрешенаВыгрузкаБезЗаказа = 0) 

	лЗаказКлиента = пДокРеализации.ДокОснование;
	  
	лОрганизация = пДокРеализации.Фирма;
	лКонтрагент = пДокРеализации.Контрагент;
	лГрузополучатель = пДокРеализации._Грузополучатель;
	
	лАдресДоставки = Строка(пДокРеализации._МаршрутныйАдрес);	//	-> Для наименования точки доставки.
	лГЛНТочкиДоставки = СокрЛП(пДокРеализации._МаршрутныйАдрес.Поле1);	// -> Для определения точки доставки, если заказ покупателя не прикреплен к реализации.
	
	лСуммаВключаетНДС = пДокРеализации.СуммаВклНДС;
	лСуммаДокумента = пДокРеализации.Итог("Сумма")	+ ?(пДокРеализации.СуммаВклНДС = 1,0,пДокРеализации.Итог("СуммаНДС"));
	
	лНалогообложение = "ПродажаОблагаетсяНДС";
	
	// -------------------------------------------------------------------------------------------------
	// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	
	лСсылкаЗаказаКоррУзла = ПолучитьИдентификаторКорреспондентаПоСсылке(лЗаказКлиента);
	
	Если ПустаяСтрока(лСсылкаЗаказаКоррУзла) = 1 Тогда // Это "чужой" заказ.
		Если пРазрешенаВыгрузкаБезЗаказа = 0 Тогда
			Сообщить("Реализация не выгружена (нет связи с заявкой из узла """ + ПрефиксУзлаУРБД + """): " + пДокРеализации);
			Возврат "";
		ИначеЕсли ПустоеЗначение(лЗаказКлиента) = 0 Тогда
			лСсылкаЗаказаКоррУзла = ПолучитьУникальныйИдентификатор(лЗаказКлиента);
			
			лДокСЗаказом = 1;
		Иначе
			лДокСЗаказом = 0;
		КонецЕсли;
	Иначе
		лДокСЗаказом = 1;
	КонецЕсли;
	
	Если лДокСЗаказом = 1 Тогда
		лДатаЗаказа = ДатуВХмл(лЗаказКлиента.ДатаДок);
		лНомерЗаказа = лЗаказКлиента.НомерДок;
	КонецЕсли;
	
	ХмлНовыйУзел = пХмлДокумент.СоздатьУзел("element","Документ.РеализацияТоваровУслуг","http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.2");	
	
	лСтруктураОрганизация = СоздатьОбъект("СписокЗначений");
	лСтруктураОрганизация.ДобавитьЗначение(ПолучитьУникальныйИдентификатор(лОрганизация),"Ссылка");
	лСтруктураОрганизация.ДобавитьЗначение(Строка(лОрганизация),"Наименование");
	лСтруктураОрганизация.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	        
	лВалюта = СоздатьОбъект("СписокЗначений");
	лВалюта.ДобавитьЗначение("643","Код");
	лВалюта.ДобавитьЗначение("RUB","Наименование");
	
	лДанныеВзаиморасчетов = СоздатьОбъект("СписокЗначений");
	лДанныеВзаиморасчетов.ДобавитьЗначение(1,"КурсВзаиморасчетов");
	
	лТовары = СоздатьОбъект("СписокЗначений");
	пДокРеализации.ВыбратьСтроки();
	Пока пДокРеализации.ПолучитьСтроку() = 1 Цикл                
		лКодЕдИзмерения = пДокРеализации.Номенклатура.БазоваяЕдиница.ОКЕИ.Код;
		лСсылкаНоменклатура = ПолучитьУникальныйИдентификатор(пДокРеализации.Номенклатура);
		лНаименованиеНоменклатуры = Строка(пДокРеализации.Номенклатура);
                                                          
		лНоменклатура = СоздатьОбъект("СписокЗначений");
		лНоменклатура.ДобавитьЗначение(лСсылкаНоменклатура,"Ссылка");
		лНоменклатура.ДобавитьЗначение(лНаименованиеНоменклатуры,"Наименование");
		
		лДанныеНоменклатуры = СоздатьОбъект("СписокЗначений");
		лДанныеНоменклатуры.ДобавитьЗначение(лНоменклатура,"Номенклатура");
		
		лДанныеСтроки = СоздатьОбъект("СписокЗначений");
		лДанныеСтроки.ДобавитьЗначение(лДанныеНоменклатуры,"ДанныеНоменклатуры");

		лЕдИзмерения = СоздатьОбъект("СписокЗначений");
		лЕдИзмерения.ДобавитьЗначение(лКодЕдИзмерения,"Код");
		лДанныеСтроки.ДобавитьЗначение(лЕдИзмерения,"ЕдиницаИзмерения");
		
		лДанныеСтроки.ДобавитьЗначение(пДокРеализации.Количество,"Количество");
		лДанныеСтроки.ДобавитьЗначение(пДокРеализации.Сумма,"Сумма");
		лДанныеСтроки.ДобавитьЗначение(пДокРеализации.Цена,"Цена");
		
		Если лНалогообложение = "ПродажаОблагаетсяНДС" Тогда
			лДанныеСтроки.ДобавитьЗначение(пДокРеализации.СтавкаНДС.Идентификатор(),"СтавкаНДС");
			лДанныеСтроки.ДобавитьЗначение(пДокРеализации.СуммаНДС,"СуммаНДС");
		КонецЕсли;
		
		лТовары.ДобавитьЗначение(лДанныеСтроки,"Строка");
	КонецЦикла;

	лСтруктураКлючевыеСвойства = СоздатьОбъект("СписокЗначений");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(ПолучитьУникальныйИдентификатор(пДокРеализации),"Ссылка");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(ДатуВХмл(пДокРеализации.ДатаДок),"Дата");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(пДокРеализации.НомерДок,"Номер");
	лСтруктураКлючевыеСвойства.ДобавитьЗначение(лСтруктураОрганизация,"Организация");
	
	лСтруктура = СоздатьОбъект("СписокЗначений");      
	лСтруктура.ДобавитьЗначение(лСтруктураКлючевыеСвойства,"КлючевыеСвойства");
	лСтруктура.ДобавитьЗначение("РеализацияКлиенту","ВидОперации");
	лСтруктура.ДобавитьЗначение(лВалюта,"Валюта");
	лСтруктура.ДобавитьЗначение(лСуммаДокумента,"Сумма");
	
	Если лНалогообложение = "ПродажаОблагаетсяНДС" Тогда
    	лСтруктура.ДобавитьЗначение(?(лСуммаВключаетНДС = 1, "true", "false"),"СуммаВключаетНДС");
	КонецЕсли;
	
	лСписок = СоздатьОбъект("СписокЗначений");
	лСписок.ДобавитьЗначение(ПолучитьУникальныйИдентификатор(лКонтрагент),"Ссылка");
	лСписок.ДобавитьЗначение(Строка(лКонтрагент),"Наименование");
	лСписок.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
	лСтруктура.ДобавитьЗначение(лСписок,"Контрагент");
	
	лСтруктура.ДобавитьЗначение(лДанныеВзаиморасчетов,"ДанныеВзаиморасчетов");
	
	Если лДокСЗаказом = 1 Тогда
		лЗаказ = СоздатьОбъект("СписокЗначений");
		лЗаказ.ДобавитьЗначение(лСсылкаЗаказаКоррУзла,"Ссылка");
		лЗаказ.ДобавитьЗначение(лДатаЗаказа,"Дата");
		лЗаказ.ДобавитьЗначение(лНомерЗаказа,"Номер");
		лЗаказ.ДобавитьЗначение(лСтруктураОрганизация,"Организация");
		
		лСтруктура.ДобавитьЗначение(лЗаказ,"Заказ");
	КонецЕсли;
	
	Если ПустоеЗначение(лГрузополучатель) = 0 Тогда
		лСписок = СоздатьОбъект("СписокЗначений");
		лСписок.ДобавитьЗначение(ПолучитьУникальныйИдентификатор(лГрузополучатель),"Ссылка");
		лСписок.ДобавитьЗначение(Строка(лГрузополучатель),"Наименование");
		лСписок.ДобавитьЗначение("ЮридическоеЛицо","ЮридическоеФизическоеЛицо");
		
		лСтруктура.ДобавитьЗначение(лСписок,"Грузополучатель");
	КонецЕсли;
	
	лСтруктура.ДобавитьЗначение(лАдресДоставки,"АдресДоставки");
	лСтруктура.ДобавитьЗначение(лНалогообложение,"Налогообложение");
	лСтруктура.ДобавитьЗначение(лТовары,"Товары");
	
	ВложитьСтруктуруВУзелХМЛ(ХмлНовыйУзел,лСтруктура);
	
	ХмлДопРеквизиты = ХмлНовыйУзел.СоздатьПодчиненныйЭлемент("ДополнительныеРеквизиты");
	ДобавитьДопРеквизит(ХмлДопРеквизиты,"Статус","Строка",?(пДокРеализации.Проведен() = 1, "Согласованно", "Не согласованно"));
	Если ПустоеЗначение(лГЛНТочкиДоставки) = 0 Тогда
		ДобавитьДопРеквизит(ХмлДопРеквизиты,"ГЛНТочкиДоставки","Строка",лГЛНТочкиДоставки);
	КонецЕсли;
	
	Сообщить("Выгружено: " + пДокРеализации);
				
	Возврат ХмлНовыйУзел;
	
КонецФункции


//*****************************************************************************
// Обновление данных реализации по результатам приема клиентом.
// Изменяется количество. Учтено дублирование строк.
Процедура ОбновитьДанныеРеализации(пДокРеализации,пТаблицаКорректировок)
	Перем 
		НужноДобавитьСтроку,
		НужноУдалитьСтроку;
	
	лДокОбъект = СоздатьОбъект("Документ.Реализация");
	лДокОбъект.НайтиДокумент(пДокРеализации);
	
	лВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	лДокОбъект.ВыгрузитьТабличнуюЧасть(лВремТЗ,"Номенклатура,Количество");
	
	лВремТЗ.НоваяКолонка("КоличествоСтрок","Число");
	лВремТЗ.НоваяКолонка("Цена","Число");
	лВремТЗ.НоваяКолонка("КоличествоРаспределить","Число");
	лВремТЗ.Заполнить(1,,,"КоличествоСтрок");
	
	лКоличествоСтрок = лВремТЗ.КоличествоСтрок();
	лВремТЗ.КоличествоСтрок(лКоличествоСтрок + пТаблицаКорректировок.КоличествоСтрок());
	лВремТЗ.Заполнить(пТаблицаКорректировок,лКоличествоСтрок + 1,,"Номенклатура,КоличествоРаспределить,Цена");
	лВремТЗ.Свернуть("Номенклатура","Цена,Количество,КоличествоРаспределить,КоличествоСтрок");
	
	// Корректировка количества и цен
	лДокОбъект.ВыбратьСтроки();
	Пока лДокОбъект.ПолучитьСтроку() = 1 Цикл
		лИскомаяСтрока = 0;
		Если лВремТЗ.НайтиЗначение(лДокОбъект.Номенклатура,лИскомаяСтрока,"Номенклатура") = 1 Тогда
			лВремТЗ.ПолучитьСтрокуПоНомеру(лИскомаяСтрока);
			
			Если лВремТЗ.КоличествоСтрок = 0 Тогда
				// Клиент принял товар, который в отгрузочных документах отсутствует.
				// В документ нужно добавить новую товарную позицию.
				НужноДобавитьСтроку = 1;
			ИначеЕсли лВремТЗ.КоличествоСтрок > 1 Тогда
				Если лДокОбъект.Количество > лВремТЗ.КоличествоРаспределить Тогда
					лДокОбъект.Количество = лВремТЗ.КоличествоРаспределить;
					лВремТЗ.КоличествоРаспределить = 0;
				Иначе
					лВремТЗ.КоличествоРаспределить = лВремТЗ.КоличествоРаспределить - лДокОбъект.Количество;
				КонецЕсли;
			Иначе
				лДокОбъект.Количество = лВремТЗ.КоличествоРаспределить;
				лВремТЗ.КоличествоРаспределить = 0;
			КонецЕсли;
			
			Если лВремТЗ.Цена > 0 Тогда
				лДокОбъект.Цена = лВремТЗ.Цена;
			КонецЕсли;
			
			лВремТЗ.КоличествоСтрок = лВремТЗ.КоличествоСтрок - 1;
			
		КонецЕсли;
		
		Если лДокОбъект.Количество = 0 Тогда
			НужноУдалитьСтроку = 1;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых товарных позиций
	Если НужноДобавитьСтроку = 1 Тогда
		лВремТЗ.ВыбратьСтроки();
		Пока лВремТЗ.ПолучитьСтроку() = 1 Цикл
			Если лВремТЗ.КоличествоРаспределить > 0 Тогда
				лДокОбъект.НоваяСтрока();
				лДокОбъект.Номенклатура = лВремТЗ.Номенклатура;
				глПересчетТаблЧасти(лДокОбъект,"Номенклатура");
				лДокОбъект.Количество = лВремТЗ.КоличествоРаспределить;
				
				Если лВремТЗ.Цена > 0 Тогда
					лДокОбъект.Цена = лВремТЗ.Цена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Удаление строк с нулевым количеством
	Если НужноУдалитьСтроку = 1 Тогда
		лТЧ = "";
		лДокОбъект.ВыгрузитьТабличнуюЧасть(лТЧ);
		лТЧ.ВыбратьСтроки();
		Пока лТЧ.ПолучитьСтроку()=1 Цикл
			Пока лТЧ.ПолучитьЗначение(лТЧ.НомерСтроки,"Количество") = 0 Цикл
				лТЧ.УдалитьСтроку(); // следующая строка стала текущей                     
				Если лТЧ.НомерСтроки = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		лДокОбъект.ЗагрузитьТабличнуюЧасть(лТЧ);
	КонецЕсли;
	
	// Перерасчет сумм в документе
	глПересчитатьСтрокиДокумента(лДокОбъект, лДокОбъект.Валюта, лДокОбъект.Курс);
	
	лСуммаВзаиморасчетовДок	= лДокОбъект.Итог("Сумма")
							+?(лДокОбъект.СуммаВклНДС=1,0,лДокОбъект.Итог("СуммаНДС"));
    лДокОбъект.СуммаВзаиморасчетов = глПересчет(лСуммаВзаиморасчетовДок,
							лДокОбъект.Валюта,лДокОбъект.Курс,
							лДокОбъект.Валюта,лДокОбъект.ДатаДок);
							
	лДокОбъект.ПринятоПокупателем = 1;
	
	Попытка
		лДокОбъект.Провести();
		Сообщить("Обновлено: " + пДокРеализации);
	Исключение
		Сообщить("Ошибка проведения документа: " + пДокРеализации);
	КонецПопытки;
КонецПроцедуры
    
//*****************************************************************************
//*****************************************************************************

ПрефиксУзлаУРБД = "EDI"; // Префикс переферийной базы УРБД
ИмяФайлаДБФ = КаталогИБ() + "ref7ref8.dbf";
ИмяФайлаИндексаДБФ = СтрЗаменить(ИмяФайлаДБФ,".dbf",".cdx");

КодЭтогоУзлаEnterpriseData = "ЦБ"; // Идентификатор этой базы в узле корреспондента.
КодУзлаКорреспондентаEnterpriseData = "ЭД"; // Идентификатор базы корреспондента.

МинДата = ТекущаяДата() - 15;
Форма.МинДатаТекст.Заголовок("Минимальная дата загружаемых документов: " + Формат(МинДата,"ДДДММГГГГ") + " г.");
